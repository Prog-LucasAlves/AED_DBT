{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.9.3", "generated_at": "2025-04-23T23:36:09.131901Z", "invocation_id": "1a9487b9-3b5c-41bc-8015-3d411e934cbd", "env": {}, "project_name": "meu_projeto_dbt", "project_id": "99f799dc05c41047bbf09e9b6b1c4639", "user_id": "d13641df-4598-495b-9ab2-e3773b9f6541", "send_anonymous_usage_stats": true, "adapter_type": "postgres"}, "nodes": {"model.meu_projeto_dbt.stg_cliente": {"database": "dbt_q4iu", "schema": "public_staging", "name": "stg_cliente", "resource_type": "model", "package_name": "meu_projeto_dbt", "path": "staging\\stg_cliente.sql", "original_file_path": "models\\staging\\stg_cliente.sql", "unique_id": "model.meu_projeto_dbt.stg_cliente", "fqn": ["meu_projeto_dbt", "staging", "stg_cliente"], "alias": "stg_cliente", "checksum": {"name": "sha256", "checksum": "225ae6e21c6377f325add76a0de3cc4857a4dedc47fad902f637e7e9a6fe02d9"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#c0c0c0"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Tabela com os Dados dos Clientes", "columns": {"id_cliente": {"name": "id_cliente", "description": "Identificador \u00fanico.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "primeiro_nome": {"name": "primeiro_nome", "description": "Primeiro nome do Cliente.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "sobrenome": {"name": "sobrenome", "description": "Sobrenome do Cliente.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "id_genero": {"name": "id_genero", "description": "Identificador do G\u00eanero do Cliente.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#c0c0c0"}, "patch_path": "meu_projeto_dbt://models\\schema.yml", "build_path": "target\\run\\meu_projeto_dbt\\models\\staging\\stg_cliente.sql", "unrendered_config": {"materialized": "view", "schema": "staging", "docs": {"node_color": "#c0c0c0", "show": true}}, "created_at": 1744721450.51607, "relation_name": "\"dbt_q4iu\".\"public_staging\".\"stg_cliente\"", "raw_code": "with\r\n    cliente as (\r\n        select\r\n            id_cliente,\r\n            primeiro_nome,\r\n            sobrenome,\r\n            id_genero,\r\n            id_estado_civil,\r\n            data_nascimento,\r\n            cpf,\r\n            rg,\r\n            email,\r\n            telefone,\r\n            endereco,\r\n            id_estado,\r\n            id_email_marketing\r\n        from public_data.tb_cliente\r\n    )\r\n\r\nselect *\r\nfrom cliente", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\meu_projeto_dbt\\models\\staging\\stg_cliente.sql", "compiled": true, "compiled_code": "with\r\n    cliente as (\r\n        select\r\n            id_cliente,\r\n            primeiro_nome,\r\n            sobrenome,\r\n            id_genero,\r\n            id_estado_civil,\r\n            data_nascimento,\r\n            cpf,\r\n            rg,\r\n            email,\r\n            telefone,\r\n            endereco,\r\n            id_estado,\r\n            id_email_marketing\r\n        from public_data.tb_cliente\r\n    )\r\n\r\nselect *\r\nfrom cliente", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["id_cliente"], "time_spine": null}, "model.meu_projeto_dbt.stg_itens_pedido": {"database": "dbt_q4iu", "schema": "public_staging", "name": "stg_itens_pedido", "resource_type": "model", "package_name": "meu_projeto_dbt", "path": "staging\\stg_itens_pedido.sql", "original_file_path": "models\\staging\\stg_itens_pedido.sql", "unique_id": "model.meu_projeto_dbt.stg_itens_pedido", "fqn": ["meu_projeto_dbt", "staging", "stg_itens_pedido"], "alias": "stg_itens_pedido", "checksum": {"name": "sha256", "checksum": "3156344589dc3ef97893ff9bb6bd50361b7b558c99e552e34f01aa7462940af7"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#c0c0c0"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#c0c0c0"}, "patch_path": null, "build_path": "target\\run\\meu_projeto_dbt\\models\\staging\\stg_itens_pedido.sql", "unrendered_config": {"materialized": "view", "schema": "staging", "docs": {"node_color": "#c0c0c0", "show": true}}, "created_at": 1744721450.4326396, "relation_name": "\"dbt_q4iu\".\"public_staging\".\"stg_itens_pedido\"", "raw_code": "with\r\n    itens_pedido as (\r\n        select\r\n            id_item_produto,\r\n            id_pedido,\r\n            id_produto,\r\n            quantidade,\r\n            preco_unitario,\r\n            valor_subtotal\r\n        from public_data.tb_itens_pedido\r\n    )\r\n\r\nselect *\r\nfrom itens_pedido", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\meu_projeto_dbt\\models\\staging\\stg_itens_pedido.sql", "compiled": true, "compiled_code": "with\r\n    itens_pedido as (\r\n        select\r\n            id_item_produto,\r\n            id_pedido,\r\n            id_produto,\r\n            quantidade,\r\n            preco_unitario,\r\n            valor_subtotal\r\n        from public_data.tb_itens_pedido\r\n    )\r\n\r\nselect *\r\nfrom itens_pedido", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.meu_projeto_dbt.stg_pedido": {"database": "dbt_q4iu", "schema": "public_staging", "name": "stg_pedido", "resource_type": "model", "package_name": "meu_projeto_dbt", "path": "staging\\stg_pedido.sql", "original_file_path": "models\\staging\\stg_pedido.sql", "unique_id": "model.meu_projeto_dbt.stg_pedido", "fqn": ["meu_projeto_dbt", "staging", "stg_pedido"], "alias": "stg_pedido", "checksum": {"name": "sha256", "checksum": "2d5d00c8223719d296a00a57882617b54a97b20df912a919407358e03ee24c75"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#c0c0c0"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#c0c0c0"}, "patch_path": null, "build_path": "target\\run\\meu_projeto_dbt\\models\\staging\\stg_pedido.sql", "unrendered_config": {"materialized": "view", "schema": "staging", "docs": {"node_color": "#c0c0c0", "show": true}}, "created_at": 1744721450.4366367, "relation_name": "\"dbt_q4iu\".\"public_staging\".\"stg_pedido\"", "raw_code": "with\r\n    pedido as (\r\n        select\r\n            id_pedido,\r\n            id_cliente,\r\n            id_forma_pagamento,\r\n            id_canal_venda,\r\n            id_status,\r\n            data_pedido,\r\n            subtotal,\r\n            frete,\r\n            total,\r\n            data_entrega\r\n        from public_data.tb_pedido\r\n    )\r\n\r\nselect *\r\nfrom pedido", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\meu_projeto_dbt\\models\\staging\\stg_pedido.sql", "compiled": true, "compiled_code": "with\r\n    pedido as (\r\n        select\r\n            id_pedido,\r\n            id_cliente,\r\n            id_forma_pagamento,\r\n            id_canal_venda,\r\n            id_status,\r\n            data_pedido,\r\n            subtotal,\r\n            frete,\r\n            total,\r\n            data_entrega\r\n        from public_data.tb_pedido\r\n    )\r\n\r\nselect *\r\nfrom pedido", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.meu_projeto_dbt.stg_produto": {"database": "dbt_q4iu", "schema": "public_staging", "name": "stg_produto", "resource_type": "model", "package_name": "meu_projeto_dbt", "path": "staging\\stg_produto.sql", "original_file_path": "models\\staging\\stg_produto.sql", "unique_id": "model.meu_projeto_dbt.stg_produto", "fqn": ["meu_projeto_dbt", "staging", "stg_produto"], "alias": "stg_produto", "checksum": {"name": "sha256", "checksum": "7606dc416318da33909c52dead422085b707624eba7219a09ec6e5fceea6b76a"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#c0c0c0"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#c0c0c0"}, "patch_path": null, "build_path": "target\\run\\meu_projeto_dbt\\models\\staging\\stg_produto.sql", "unrendered_config": {"materialized": "view", "schema": "staging", "docs": {"node_color": "#c0c0c0", "show": true}}, "created_at": 1744721450.4396057, "relation_name": "\"dbt_q4iu\".\"public_staging\".\"stg_produto\"", "raw_code": "with\r\n    produto as (\r\n        select\r\n            id_produto,\r\n            descricao_produto,\r\n            id_categoria,\r\n            preco_unitario,\r\n            quantidade_estoque\r\n        from public_data.tb_produto\r\n    )\r\n\r\nselect *\r\nfrom produto", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\meu_projeto_dbt\\models\\staging\\stg_produto.sql", "compiled": true, "compiled_code": "with\r\n    produto as (\r\n        select\r\n            id_produto,\r\n            descricao_produto,\r\n            id_categoria,\r\n            preco_unitario,\r\n            quantidade_estoque\r\n        from public_data.tb_produto\r\n    )\r\n\r\nselect *\r\nfrom produto", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "test.meu_projeto_dbt.unique_stg_cliente_id_cliente.733cdc91e9": {"database": "dbt_q4iu", "schema": "public_dbt_test__audit", "name": "unique_stg_cliente_id_cliente", "resource_type": "test", "package_name": "meu_projeto_dbt", "path": "unique_stg_cliente_id_cliente.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.meu_projeto_dbt.unique_stg_cliente_id_cliente.733cdc91e9", "fqn": ["meu_projeto_dbt", "unique_stg_cliente_id_cliente"], "alias": "unique_stg_cliente_id_cliente", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1744721450.608819, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_cliente", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.meu_projeto_dbt.stg_cliente"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id_cliente", "file_key_name": "models.stg_cliente", "attached_node": "model.meu_projeto_dbt.stg_cliente", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id_cliente", "model": "{{ get_where_subquery(ref('stg_cliente')) }}"}, "namespace": null}}, "test.meu_projeto_dbt.not_null_stg_cliente_id_cliente.7ecdbeed7e": {"database": "dbt_q4iu", "schema": "public_dbt_test__audit", "name": "not_null_stg_cliente_id_cliente", "resource_type": "test", "package_name": "meu_projeto_dbt", "path": "not_null_stg_cliente_id_cliente.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.meu_projeto_dbt.not_null_stg_cliente_id_cliente.7ecdbeed7e", "fqn": ["meu_projeto_dbt", "not_null_stg_cliente_id_cliente"], "alias": "not_null_stg_cliente_id_cliente", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1744721450.6108189, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_cliente", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.meu_projeto_dbt.stg_cliente"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id_cliente", "file_key_name": "models.stg_cliente", "attached_node": "model.meu_projeto_dbt.stg_cliente", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id_cliente", "model": "{{ get_where_subquery(ref('stg_cliente')) }}"}, "namespace": null}}, "test.meu_projeto_dbt.not_null_stg_cliente_primeiro_nome.4b8446d1b7": {"database": "dbt_q4iu", "schema": "public_dbt_test__audit", "name": "not_null_stg_cliente_primeiro_nome", "resource_type": "test", "package_name": "meu_projeto_dbt", "path": "not_null_stg_cliente_primeiro_nome.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.meu_projeto_dbt.not_null_stg_cliente_primeiro_nome.4b8446d1b7", "fqn": ["meu_projeto_dbt", "not_null_stg_cliente_primeiro_nome"], "alias": "not_null_stg_cliente_primeiro_nome", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1744721450.612818, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_cliente", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.meu_projeto_dbt.stg_cliente"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "primeiro_nome", "file_key_name": "models.stg_cliente", "attached_node": "model.meu_projeto_dbt.stg_cliente", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "primeiro_nome", "model": "{{ get_where_subquery(ref('stg_cliente')) }}"}, "namespace": null}}, "test.meu_projeto_dbt.not_null_stg_cliente_sobrenome.9419dc8703": {"database": "dbt_q4iu", "schema": "public_dbt_test__audit", "name": "not_null_stg_cliente_sobrenome", "resource_type": "test", "package_name": "meu_projeto_dbt", "path": "not_null_stg_cliente_sobrenome.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.meu_projeto_dbt.not_null_stg_cliente_sobrenome.9419dc8703", "fqn": ["meu_projeto_dbt", "not_null_stg_cliente_sobrenome"], "alias": "not_null_stg_cliente_sobrenome", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1744721450.6148171, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_cliente", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.meu_projeto_dbt.stg_cliente"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sobrenome", "file_key_name": "models.stg_cliente", "attached_node": "model.meu_projeto_dbt.stg_cliente", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sobrenome", "model": "{{ get_where_subquery(ref('stg_cliente')) }}"}, "namespace": null}}, "test.meu_projeto_dbt.not_null_stg_cliente_id_genero.12675eb7f4": {"database": "dbt_q4iu", "schema": "public_dbt_test__audit", "name": "not_null_stg_cliente_id_genero", "resource_type": "test", "package_name": "meu_projeto_dbt", "path": "not_null_stg_cliente_id_genero.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.meu_projeto_dbt.not_null_stg_cliente_id_genero.12675eb7f4", "fqn": ["meu_projeto_dbt", "not_null_stg_cliente_id_genero"], "alias": "not_null_stg_cliente_id_genero", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1744721450.6158183, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_cliente", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.meu_projeto_dbt.stg_cliente"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id_genero", "file_key_name": "models.stg_cliente", "attached_node": "model.meu_projeto_dbt.stg_cliente", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id_genero", "model": "{{ get_where_subquery(ref('stg_cliente')) }}"}, "namespace": null}}, "model.meu_projeto_dbt.stg_email_marketing": {"database": "dbt_q4iu", "schema": "public_staging", "name": "stg_email_marketing", "resource_type": "model", "package_name": "meu_projeto_dbt", "path": "staging\\stg_email_marketing.sql", "original_file_path": "models\\staging\\stg_email_marketing.sql", "unique_id": "model.meu_projeto_dbt.stg_email_marketing", "fqn": ["meu_projeto_dbt", "staging", "stg_email_marketing"], "alias": "stg_email_marketing", "checksum": {"name": "sha256", "checksum": "5fb74ea1b48f4c7df15d402a6c0b37c0956fdb1d8dcd99799c76cdb8a640ca23"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#c0c0c0"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#c0c0c0"}, "patch_path": null, "build_path": "target\\run\\meu_projeto_dbt\\models\\staging\\stg_email_marketing.sql", "unrendered_config": {"materialized": "view", "schema": "staging", "docs": {"node_color": "#c0c0c0", "show": true}}, "created_at": 1744723266.5314076, "relation_name": "\"dbt_q4iu\".\"public_staging\".\"stg_email_marketing\"", "raw_code": "with\r\n    email_marketing as (\r\n        select\r\n            id_email_marketing,\r\n            descricao_email_marketing\r\n        from public_data.tb_email_marketing\r\n    )\r\n\r\nselect *\r\nfrom email_marketing", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\meu_projeto_dbt\\models\\staging\\stg_email_marketing.sql", "compiled": true, "compiled_code": "with\r\n    email_marketing as (\r\n        select\r\n            id_email_marketing,\r\n            descricao_email_marketing\r\n        from public_data.tb_email_marketing\r\n    )\r\n\r\nselect *\r\nfrom email_marketing", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.meu_projeto_dbt.stg_genero": {"database": "dbt_q4iu", "schema": "public_staging", "name": "stg_genero", "resource_type": "model", "package_name": "meu_projeto_dbt", "path": "staging\\stg_genero.sql", "original_file_path": "models\\staging\\stg_genero.sql", "unique_id": "model.meu_projeto_dbt.stg_genero", "fqn": ["meu_projeto_dbt", "staging", "stg_genero"], "alias": "stg_genero", "checksum": {"name": "sha256", "checksum": "dda5288032122e44c50ad0344c1b00bfae32b3c20a173aa8aa105d4b03cbf845"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#c0c0c0"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#c0c0c0"}, "patch_path": null, "build_path": "target\\run\\meu_projeto_dbt\\models\\staging\\stg_genero.sql", "unrendered_config": {"materialized": "view", "schema": "staging", "docs": {"node_color": "#c0c0c0", "show": true}}, "created_at": 1744723266.5344436, "relation_name": "\"dbt_q4iu\".\"public_staging\".\"stg_genero\"", "raw_code": "with\r\n    genero as (\r\n        select\r\n            id_genero,\r\n            descricao_genero\r\n        from public_data.tb_genero\r\n    )\r\n\r\nselect *\r\nfrom genero", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\meu_projeto_dbt\\models\\staging\\stg_genero.sql", "compiled": true, "compiled_code": "with\r\n    genero as (\r\n        select\r\n            id_genero,\r\n            descricao_genero\r\n        from public_data.tb_genero\r\n    )\r\n\r\nselect *\r\nfrom genero", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.meu_projeto_dbt.stg_formas_pagamento": {"database": "dbt_q4iu", "schema": "public_staging", "name": "stg_formas_pagamento", "resource_type": "model", "package_name": "meu_projeto_dbt", "path": "staging\\stg_formas_pagamento.sql", "original_file_path": "models\\staging\\stg_formas_pagamento.sql", "unique_id": "model.meu_projeto_dbt.stg_formas_pagamento", "fqn": ["meu_projeto_dbt", "staging", "stg_formas_pagamento"], "alias": "stg_formas_pagamento", "checksum": {"name": "sha256", "checksum": "cc9a6f067d0120b841910de0365662bcaddb587adef0d4c2a3c496271ce3ee14"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#c0c0c0"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#c0c0c0"}, "patch_path": null, "build_path": "target\\run\\meu_projeto_dbt\\models\\staging\\stg_formas_pagamento.sql", "unrendered_config": {"materialized": "view", "schema": "staging", "docs": {"node_color": "#c0c0c0", "show": true}}, "created_at": 1744723266.5384436, "relation_name": "\"dbt_q4iu\".\"public_staging\".\"stg_formas_pagamento\"", "raw_code": "with\r\n    formas_pagamento as (\r\n        select\r\n            id_forma_pagamento,\r\n            descricao_metodo_pagamento\r\n        from public_data.tb_formas_pagamento\r\n    )\r\n\r\nselect *\r\nfrom formas_pagamento", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\meu_projeto_dbt\\models\\staging\\stg_formas_pagamento.sql", "compiled": true, "compiled_code": "with\r\n    formas_pagamento as (\r\n        select\r\n            id_forma_pagamento,\r\n            descricao_metodo_pagamento\r\n        from public_data.tb_formas_pagamento\r\n    )\r\n\r\nselect *\r\nfrom formas_pagamento", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.meu_projeto_dbt.stg_categoria": {"database": "dbt_q4iu", "schema": "public_staging", "name": "stg_categoria", "resource_type": "model", "package_name": "meu_projeto_dbt", "path": "staging\\stg_categoria.sql", "original_file_path": "models\\staging\\stg_categoria.sql", "unique_id": "model.meu_projeto_dbt.stg_categoria", "fqn": ["meu_projeto_dbt", "staging", "stg_categoria"], "alias": "stg_categoria", "checksum": {"name": "sha256", "checksum": "8b51b5590d27acefb270cf35b1a2a873c5df51526a6b1f0cfd69a8037d695e4b"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#c0c0c0"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Tabela das Categorias dos Produtos", "columns": {"id_categoria": {"name": "id_categoria", "description": "Identificador \u00fanico.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "descricao_categoria": {"name": "descricao_categoria", "description": "Descri\u00e7\u00e3o da Categoria.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#c0c0c0"}, "patch_path": "meu_projeto_dbt://models\\schema.yml", "build_path": "target\\run\\meu_projeto_dbt\\models\\staging\\stg_categoria.sql", "unrendered_config": {"materialized": "view", "schema": "staging", "docs": {"node_color": "#c0c0c0", "show": true}}, "created_at": 1744723266.6201725, "relation_name": "\"dbt_q4iu\".\"public_staging\".\"stg_categoria\"", "raw_code": "with\r\n    categoria as (\r\n        select\r\n            id_categoria,\r\n            descricao_categoria\r\n        from public_data.tb_categoria\r\n    )\r\n\r\nselect *\r\nfrom categoria", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\meu_projeto_dbt\\models\\staging\\stg_categoria.sql", "compiled": true, "compiled_code": "with\r\n    categoria as (\r\n        select\r\n            id_categoria,\r\n            descricao_categoria\r\n        from public_data.tb_categoria\r\n    )\r\n\r\nselect *\r\nfrom categoria", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["descricao_categoria", "id_categoria"], "time_spine": null}, "model.meu_projeto_dbt.stg_estado_civil": {"database": "dbt_q4iu", "schema": "public_staging", "name": "stg_estado_civil", "resource_type": "model", "package_name": "meu_projeto_dbt", "path": "staging\\stg_estado_civil.sql", "original_file_path": "models\\staging\\stg_estado_civil.sql", "unique_id": "model.meu_projeto_dbt.stg_estado_civil", "fqn": ["meu_projeto_dbt", "staging", "stg_estado_civil"], "alias": "stg_estado_civil", "checksum": {"name": "sha256", "checksum": "3e21f3101a3ec7e9f5eff54bec61e9172467608305a62301f3941d6a8d97562e"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#c0c0c0"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#c0c0c0"}, "patch_path": null, "build_path": "target\\run\\meu_projeto_dbt\\models\\staging\\stg_estado_civil.sql", "unrendered_config": {"materialized": "view", "schema": "staging", "docs": {"node_color": "#c0c0c0", "show": true}}, "created_at": 1744723266.54305, "relation_name": "\"dbt_q4iu\".\"public_staging\".\"stg_estado_civil\"", "raw_code": "with\r\n    estado_civil as (\r\n        select\r\n            id_estado_civil,\r\n            descricao_estado_civil\r\n        from public_data.tb_estado_civil\r\n    )\r\n\r\nselect *\r\nfrom estado_civil", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\meu_projeto_dbt\\models\\staging\\stg_estado_civil.sql", "compiled": true, "compiled_code": "with\r\n    estado_civil as (\r\n        select\r\n            id_estado_civil,\r\n            descricao_estado_civil\r\n        from public_data.tb_estado_civil\r\n    )\r\n\r\nselect *\r\nfrom estado_civil", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.meu_projeto_dbt.stg_canais_venda": {"database": "dbt_q4iu", "schema": "public_staging", "name": "stg_canais_venda", "resource_type": "model", "package_name": "meu_projeto_dbt", "path": "staging\\stg_canais_venda.sql", "original_file_path": "models\\staging\\stg_canais_venda.sql", "unique_id": "model.meu_projeto_dbt.stg_canais_venda", "fqn": ["meu_projeto_dbt", "staging", "stg_canais_venda"], "alias": "stg_canais_venda", "checksum": {"name": "sha256", "checksum": "d8902433063ddd088e302e922c95561ed581408d6418709f4e79744c7c7a95c0"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#c0c0c0"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Tabela de Canais de Venda de cada Pedido", "columns": {"id_canal_venda": {"name": "id_canal_venda", "description": "Identificador \u00fanico.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "descricao_canal_venda": {"name": "descricao_canal_venda", "description": "Descri\u00e7\u00e3o do Canal de Venda.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#c0c0c0"}, "patch_path": "meu_projeto_dbt://models\\schema.yml", "build_path": "target\\run\\meu_projeto_dbt\\models\\staging\\stg_canais_venda.sql", "unrendered_config": {"materialized": "view", "schema": "staging", "docs": {"node_color": "#c0c0c0", "show": true}}, "created_at": 1744723266.6222146, "relation_name": "\"dbt_q4iu\".\"public_staging\".\"stg_canais_venda\"", "raw_code": "with\r\n    canais_venda as (\r\n        select\r\n            id_canal_venda,\r\n            descricao_canal_venda\r\n        from public_data.tb_canais_venda\r\n    )\r\n\r\nselect *\r\nfrom canais_venda", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\meu_projeto_dbt\\models\\staging\\stg_canais_venda.sql", "compiled": true, "compiled_code": "with\r\n    canais_venda as (\r\n        select\r\n            id_canal_venda,\r\n            descricao_canal_venda\r\n        from public_data.tb_canais_venda\r\n    )\r\n\r\nselect *\r\nfrom canais_venda", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["descricao_canal_venda", "id_canal_venda"], "time_spine": null}, "model.meu_projeto_dbt.stg_estado": {"database": "dbt_q4iu", "schema": "public_staging", "name": "stg_estado", "resource_type": "model", "package_name": "meu_projeto_dbt", "path": "staging\\stg_estado.sql", "original_file_path": "models\\staging\\stg_estado.sql", "unique_id": "model.meu_projeto_dbt.stg_estado", "fqn": ["meu_projeto_dbt", "staging", "stg_estado"], "alias": "stg_estado", "checksum": {"name": "sha256", "checksum": "b2006e454569ac0288590643819558ebac3639778138808d6cdf8339847ca1ca"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#c0c0c0"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#c0c0c0"}, "patch_path": null, "build_path": "target\\run\\meu_projeto_dbt\\models\\staging\\stg_estado.sql", "unrendered_config": {"materialized": "view", "schema": "staging", "docs": {"node_color": "#c0c0c0", "show": true}}, "created_at": 1744723266.5480502, "relation_name": "\"dbt_q4iu\".\"public_staging\".\"stg_estado\"", "raw_code": "with\r\n    estado as (\r\n        select\r\n            id_estado,\r\n            descricao_estado,\r\n            sigla_estado\r\n        from public_data.tb_estado\r\n    )\r\n\r\nselect *\r\nfrom estado", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\meu_projeto_dbt\\models\\staging\\stg_estado.sql", "compiled": true, "compiled_code": "with\r\n    estado as (\r\n        select\r\n            id_estado,\r\n            descricao_estado,\r\n            sigla_estado\r\n        from public_data.tb_estado\r\n    )\r\n\r\nselect *\r\nfrom estado", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.meu_projeto_dbt.stg_status": {"database": "dbt_q4iu", "schema": "public_staging", "name": "stg_status", "resource_type": "model", "package_name": "meu_projeto_dbt", "path": "staging\\stg_status.sql", "original_file_path": "models\\staging\\stg_status.sql", "unique_id": "model.meu_projeto_dbt.stg_status", "fqn": ["meu_projeto_dbt", "staging", "stg_status"], "alias": "stg_status", "checksum": {"name": "sha256", "checksum": "bbcce60af885c209d316b699d429c404f32ce85bf6aecdb0863a03af289ad552"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#c0c0c0"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#c0c0c0"}, "patch_path": null, "build_path": "target\\run\\meu_projeto_dbt\\models\\staging\\stg_status.sql", "unrendered_config": {"materialized": "view", "schema": "staging", "docs": {"node_color": "#c0c0c0", "show": true}}, "created_at": 1744723266.5565891, "relation_name": "\"dbt_q4iu\".\"public_staging\".\"stg_status\"", "raw_code": "with\r\n    status as (\r\n        select\r\n            id_status,\r\n            descricao_status\r\n        from public_data.tb_status\r\n    )\r\n\r\nselect *\r\nfrom status", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\meu_projeto_dbt\\models\\staging\\stg_status.sql", "compiled": true, "compiled_code": "with\r\n    status as (\r\n        select\r\n            id_status,\r\n            descricao_status\r\n        from public_data.tb_status\r\n    )\r\n\r\nselect *\r\nfrom status", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "test.meu_projeto_dbt.unique_stg_categoria_id_categoria.dcb2a8f121": {"database": "dbt_q4iu", "schema": "public_dbt_test__audit", "name": "unique_stg_categoria_id_categoria", "resource_type": "test", "package_name": "meu_projeto_dbt", "path": "unique_stg_categoria_id_categoria.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.meu_projeto_dbt.unique_stg_categoria_id_categoria.dcb2a8f121", "fqn": ["meu_projeto_dbt", "unique_stg_categoria_id_categoria"], "alias": "unique_stg_categoria_id_categoria", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1744723266.706169, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_categoria", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.meu_projeto_dbt.stg_categoria"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id_categoria", "file_key_name": "models.stg_categoria", "attached_node": "model.meu_projeto_dbt.stg_categoria", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id_categoria", "model": "{{ get_where_subquery(ref('stg_categoria')) }}"}, "namespace": null}}, "test.meu_projeto_dbt.not_null_stg_categoria_id_categoria.71fd8580d6": {"database": "dbt_q4iu", "schema": "public_dbt_test__audit", "name": "not_null_stg_categoria_id_categoria", "resource_type": "test", "package_name": "meu_projeto_dbt", "path": "not_null_stg_categoria_id_categoria.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.meu_projeto_dbt.not_null_stg_categoria_id_categoria.71fd8580d6", "fqn": ["meu_projeto_dbt", "not_null_stg_categoria_id_categoria"], "alias": "not_null_stg_categoria_id_categoria", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1744723266.7081974, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_categoria", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.meu_projeto_dbt.stg_categoria"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id_categoria", "file_key_name": "models.stg_categoria", "attached_node": "model.meu_projeto_dbt.stg_categoria", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id_categoria", "model": "{{ get_where_subquery(ref('stg_categoria')) }}"}, "namespace": null}}, "test.meu_projeto_dbt.unique_stg_categoria_descricao_categoria.8072a693b6": {"database": "dbt_q4iu", "schema": "public_dbt_test__audit", "name": "unique_stg_categoria_descricao_categoria", "resource_type": "test", "package_name": "meu_projeto_dbt", "path": "unique_stg_categoria_descricao_categoria.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.meu_projeto_dbt.unique_stg_categoria_descricao_categoria.8072a693b6", "fqn": ["meu_projeto_dbt", "unique_stg_categoria_descricao_categoria"], "alias": "unique_stg_categoria_descricao_categoria", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1744723266.7097313, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_categoria", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.meu_projeto_dbt.stg_categoria"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "descricao_categoria", "file_key_name": "models.stg_categoria", "attached_node": "model.meu_projeto_dbt.stg_categoria", "test_metadata": {"name": "unique", "kwargs": {"column_name": "descricao_categoria", "model": "{{ get_where_subquery(ref('stg_categoria')) }}"}, "namespace": null}}, "test.meu_projeto_dbt.not_null_stg_categoria_descricao_categoria.77e898a9af": {"database": "dbt_q4iu", "schema": "public_dbt_test__audit", "name": "not_null_stg_categoria_descricao_categoria", "resource_type": "test", "package_name": "meu_projeto_dbt", "path": "not_null_stg_categoria_descricao_categoria.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.meu_projeto_dbt.not_null_stg_categoria_descricao_categoria.77e898a9af", "fqn": ["meu_projeto_dbt", "not_null_stg_categoria_descricao_categoria"], "alias": "not_null_stg_categoria_descricao_categoria", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1744723266.7112653, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_categoria", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.meu_projeto_dbt.stg_categoria"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "descricao_categoria", "file_key_name": "models.stg_categoria", "attached_node": "model.meu_projeto_dbt.stg_categoria", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "descricao_categoria", "model": "{{ get_where_subquery(ref('stg_categoria')) }}"}, "namespace": null}}, "test.meu_projeto_dbt.unique_stg_canais_venda_id_canal_venda.2f3c34ab29": {"database": "dbt_q4iu", "schema": "public_dbt_test__audit", "name": "unique_stg_canais_venda_id_canal_venda", "resource_type": "test", "package_name": "meu_projeto_dbt", "path": "unique_stg_canais_venda_id_canal_venda.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.meu_projeto_dbt.unique_stg_canais_venda_id_canal_venda.2f3c34ab29", "fqn": ["meu_projeto_dbt", "unique_stg_canais_venda_id_canal_venda"], "alias": "unique_stg_canais_venda_id_canal_venda", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1744723266.7133005, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_canais_venda", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.meu_projeto_dbt.stg_canais_venda"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id_canal_venda", "file_key_name": "models.stg_canais_venda", "attached_node": "model.meu_projeto_dbt.stg_canais_venda", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id_canal_venda", "model": "{{ get_where_subquery(ref('stg_canais_venda')) }}"}, "namespace": null}}, "test.meu_projeto_dbt.not_null_stg_canais_venda_id_canal_venda.bc4c4810d7": {"database": "dbt_q4iu", "schema": "public_dbt_test__audit", "name": "not_null_stg_canais_venda_id_canal_venda", "resource_type": "test", "package_name": "meu_projeto_dbt", "path": "not_null_stg_canais_venda_id_canal_venda.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.meu_projeto_dbt.not_null_stg_canais_venda_id_canal_venda.bc4c4810d7", "fqn": ["meu_projeto_dbt", "not_null_stg_canais_venda_id_canal_venda"], "alias": "not_null_stg_canais_venda_id_canal_venda", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1744723266.7148397, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_canais_venda", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.meu_projeto_dbt.stg_canais_venda"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id_canal_venda", "file_key_name": "models.stg_canais_venda", "attached_node": "model.meu_projeto_dbt.stg_canais_venda", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id_canal_venda", "model": "{{ get_where_subquery(ref('stg_canais_venda')) }}"}, "namespace": null}}, "test.meu_projeto_dbt.unique_stg_canais_venda_descricao_canal_venda.b5e883150c": {"database": "dbt_q4iu", "schema": "public_dbt_test__audit", "name": "unique_stg_canais_venda_descricao_canal_venda", "resource_type": "test", "package_name": "meu_projeto_dbt", "path": "unique_stg_canais_venda_descricao_canal_venda.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.meu_projeto_dbt.unique_stg_canais_venda_descricao_canal_venda.b5e883150c", "fqn": ["meu_projeto_dbt", "unique_stg_canais_venda_descricao_canal_venda"], "alias": "unique_stg_canais_venda_descricao_canal_venda", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1744723266.7168424, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_canais_venda", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.meu_projeto_dbt.stg_canais_venda"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "descricao_canal_venda", "file_key_name": "models.stg_canais_venda", "attached_node": "model.meu_projeto_dbt.stg_canais_venda", "test_metadata": {"name": "unique", "kwargs": {"column_name": "descricao_canal_venda", "model": "{{ get_where_subquery(ref('stg_canais_venda')) }}"}, "namespace": null}}, "test.meu_projeto_dbt.not_null_stg_canais_venda_descricao_canal_venda.1726855010": {"database": "dbt_q4iu", "schema": "public_dbt_test__audit", "name": "not_null_stg_canais_venda_descricao_canal_venda", "resource_type": "test", "package_name": "meu_projeto_dbt", "path": "not_null_stg_canais_venda_descricao_canal_venda.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.meu_projeto_dbt.not_null_stg_canais_venda_descricao_canal_venda.1726855010", "fqn": ["meu_projeto_dbt", "not_null_stg_canais_venda_descricao_canal_venda"], "alias": "not_null_stg_canais_venda_descricao_canal_venda", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1744723266.7178745, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_canais_venda", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.meu_projeto_dbt.stg_canais_venda"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "descricao_canal_venda", "file_key_name": "models.stg_canais_venda", "attached_node": "model.meu_projeto_dbt.stg_canais_venda", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "descricao_canal_venda", "model": "{{ get_where_subquery(ref('stg_canais_venda')) }}"}, "namespace": null}}, "model.meu_projeto_dbt.raw_pedido": {"database": "dbt_q4iu", "schema": "public_raw", "name": "raw_pedido", "resource_type": "model", "package_name": "meu_projeto_dbt", "path": "raw\\raw_pedido.sql", "original_file_path": "models\\raw\\raw_pedido.sql", "unique_id": "model.meu_projeto_dbt.raw_pedido", "fqn": ["meu_projeto_dbt", "raw", "raw_pedido"], "alias": "raw_pedido", "checksum": {"name": "sha256", "checksum": "8fe6b8cc8be9436be0e131ce291c5afa1a4cc3011a8371a4ff070fc2925dbe98"}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#c0c0c0"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#c0c0c0"}, "patch_path": null, "build_path": "target\\run\\meu_projeto_dbt\\models\\raw\\raw_pedido.sql", "unrendered_config": {"materialized": "table", "schema": "raw", "docs": {"node_color": "#c0c0c0", "show": true}}, "created_at": 1744736078.0609856, "relation_name": "\"dbt_q4iu\".\"public_raw\".\"raw_pedido\"", "raw_code": "WITH pedido AS (\r\n    SELECT *\r\n    FROM {{ ref(\"stg_pedido\") }}\r\n    WHERE total > 0) -- Filtra pedidos com valOR maiOR que 0\r\n\r\nSELECT * FROM pedido", "language": "sql", "refs": [{"name": "stg_pedido", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.meu_projeto_dbt.stg_pedido"]}, "compiled_path": "target\\compiled\\meu_projeto_dbt\\models\\raw\\raw_pedido.sql", "compiled": true, "compiled_code": "WITH pedido AS (\n    SELECT *\n    FROM \"dbt_q4iu\".\"public_staging\".\"stg_pedido\"\n    WHERE total > 0) -- Filtra pedidos com valOR maiOR que 0\n\nSELECT * FROM pedido", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.meu_projeto_dbt.raw_tempo_medio_entrega": {"database": "dbt_q4iu", "schema": "public_raw", "name": "raw_tempo_medio_entrega", "resource_type": "model", "package_name": "meu_projeto_dbt", "path": "raw\\raw_tempo_medio_entrega.sql", "original_file_path": "models\\raw\\raw_tempo_medio_entrega.sql", "unique_id": "model.meu_projeto_dbt.raw_tempo_medio_entrega", "fqn": ["meu_projeto_dbt", "raw", "raw_tempo_medio_entrega"], "alias": "raw_tempo_medio_entrega", "checksum": {"name": "sha256", "checksum": "7c0de1d42e570759a3752fff80edf5bc9c8e66899bb593b570f27ab7b7c29960"}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#c0c0c0"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#c0c0c0"}, "patch_path": null, "build_path": "target\\run\\meu_projeto_dbt\\models\\raw\\raw_tempo_medio_entrega.sql", "unrendered_config": {"materialized": "table", "schema": "raw", "docs": {"node_color": "#c0c0c0", "show": true}}, "created_at": 1744736078.0810199, "relation_name": "\"dbt_q4iu\".\"public_raw\".\"raw_tempo_medio_entrega\"", "raw_code": "-- Modelo para calcular o tempo m\u00e9dio de entrega dos pedidos\r\nWITH tempo_medio_entrega AS (\r\n    SELECT\r\n        p.id_pedido,\r\n        p.data_pedido,\r\n        p.data_entrega,\r\n        (p.data_entrega - p.data_pedido)::INT AS tempo_entrega_dias\r\n    FROM {{ ref(\"stg_pedido\") }} p\r\n    WHERE p.data_entrega IS NOT NULL\r\n)\r\n\r\nSELECT * FROM tempo_medio_entrega", "language": "sql", "refs": [{"name": "stg_pedido", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.meu_projeto_dbt.stg_pedido"]}, "compiled_path": "target\\compiled\\meu_projeto_dbt\\models\\raw\\raw_tempo_medio_entrega.sql", "compiled": true, "compiled_code": "-- Modelo para calcular o tempo m\u00e9dio de entrega dos pedidos\nWITH tempo_medio_entrega AS (\n    SELECT\n        p.id_pedido,\n        p.data_pedido,\n        p.data_entrega,\n        (p.data_entrega - p.data_pedido)::INT AS tempo_entrega_dias\n    FROM \"dbt_q4iu\".\"public_staging\".\"stg_pedido\" p\n    WHERE p.data_entrega IS NOT NULL\n)\n\nSELECT * FROM tempo_medio_entrega", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.meu_projeto_dbt.raw_valor_total_forma_pagamento": {"database": "dbt_q4iu", "schema": "public_raw", "name": "raw_valor_total_forma_pagamento", "resource_type": "model", "package_name": "meu_projeto_dbt", "path": "raw\\raw_valor_total_forma_pagamento.sql", "original_file_path": "models\\raw\\raw_valor_total_forma_pagamento.sql", "unique_id": "model.meu_projeto_dbt.raw_valor_total_forma_pagamento", "fqn": ["meu_projeto_dbt", "raw", "raw_valor_total_forma_pagamento"], "alias": "raw_valor_total_forma_pagamento", "checksum": {"name": "sha256", "checksum": "b5708cac376b9e2c5f1d96235f7c7bc9b20513ae349a536545e5d80f724da7ac"}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#c0c0c0"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#c0c0c0"}, "patch_path": null, "build_path": "target\\run\\meu_projeto_dbt\\models\\raw\\raw_valor_total_forma_pagamento.sql", "unrendered_config": {"materialized": "table", "schema": "raw", "docs": {"node_color": "#c0c0c0", "show": true}}, "created_at": 1744736078.084019, "relation_name": "\"dbt_q4iu\".\"public_raw\".\"raw_valor_total_forma_pagamento\"", "raw_code": "-- Modelo para calcular o valor total por forma de pagamento\r\nWITH\r\n    total_por_forma_pagamento AS(\r\n        SELECT\r\n            fp.descricao_metodo_pagamento,\r\n            sum(p.total) AS total -- Calcula o total por forma de pagamento\r\n        FROM {{ ref(\"raw_pedido\") }} p\r\n        JOIN {{ ref(\"stg_formas_pagamento\") }} fp ON p.id_forma_pagamento = fp.id_forma_pagamento\r\n        GROUP BY fp.descricao_metodo_pagamento\r\n    )\r\nSELECT\r\n    descricao_metodo_pagamento,\r\n    'R$' || to_char(total, 'FM999G999G999D99') AS total_formatado, -- Formata o total para moeda brasileira\r\n    round((total * 100.0 /\r\n                (SELECT sum(total)\r\n                 FROM total_por_forma_pagamento))::numeric, 2) AS percentual -- Calcula o percentual de cada forma de pagamento\r\nFROM total_por_forma_pagamento\r\nORDER BY total DESC -- Ordena os resultados por total decrescente", "language": "sql", "refs": [{"name": "raw_pedido", "package": null, "version": null}, {"name": "stg_formas_pagamento", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.meu_projeto_dbt.raw_pedido", "model.meu_projeto_dbt.stg_formas_pagamento"]}, "compiled_path": "target\\compiled\\meu_projeto_dbt\\models\\raw\\raw_valor_total_forma_pagamento.sql", "compiled": true, "compiled_code": "-- Modelo para calcular o valor total por forma de pagamento\nWITH\n    total_por_forma_pagamento AS(\n        SELECT\n            fp.descricao_metodo_pagamento,\n            sum(p.total) AS total -- Calcula o total por forma de pagamento\n        FROM \"dbt_q4iu\".\"public_raw\".\"raw_pedido\" p\n        JOIN \"dbt_q4iu\".\"public_staging\".\"stg_formas_pagamento\" fp ON p.id_forma_pagamento = fp.id_forma_pagamento\n        GROUP BY fp.descricao_metodo_pagamento\n    )\nSELECT\n    descricao_metodo_pagamento,\n    'R$' || to_char(total, 'FM999G999G999D99') AS total_formatado, -- Formata o total para moeda brasileira\n    round((total * 100.0 /\n                (SELECT sum(total)\n                 FROM total_por_forma_pagamento))::numeric, 2) AS percentual -- Calcula o percentual de cada forma de pagamento\nFROM total_por_forma_pagamento\nORDER BY total DESC -- Ordena os resultados por total decrescente", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.meu_projeto_dbt.raw_faturamento_mensal": {"database": "dbt_q4iu", "schema": "public_raw", "name": "raw_faturamento_mensal", "resource_type": "model", "package_name": "meu_projeto_dbt", "path": "raw\\raw_faturamento_mensal.sql", "original_file_path": "models\\raw\\raw_faturamento_mensal.sql", "unique_id": "model.meu_projeto_dbt.raw_faturamento_mensal", "fqn": ["meu_projeto_dbt", "raw", "raw_faturamento_mensal"], "alias": "raw_faturamento_mensal", "checksum": {"name": "sha256", "checksum": "21509d73db4817ea2e4fecec45333094b18cb3490bd3d78ffbee3722969948b5"}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#c0c0c0"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#c0c0c0"}, "patch_path": null, "build_path": "target\\run\\meu_projeto_dbt\\models\\raw\\raw_faturamento_mensal.sql", "unrendered_config": {"materialized": "table", "schema": "raw", "docs": {"node_color": "#c0c0c0", "show": true}}, "created_at": 1744736078.0865579, "relation_name": "\"dbt_q4iu\".\"public_raw\".\"raw_faturamento_mensal\"", "raw_code": "-- Faturamento mensal com formata\u00e7\u00e3o de moeda e total acumulado\r\nWITH\r\n    faturamento_mensal AS (\r\n        SELECT\r\n            to_char(date_trunc('month', data_pedido), 'YYYY-MM') AS mes, -- Formata\u00e7\u00e3o para o m\u00eas e ano\r\n            'R$ ' || to_char(sum(total), 'FM999G999G999D99') AS total_faturado, -- Formata\u00e7\u00e3o para o total do m\u00eas\r\n            'R$ ' || to_char(sum(sum(total)) OVER (\r\n                                        ORDER BY date_trunc('month', data_pedido)), 'FM999G999G999D99') AS total_faturado_acumulado\r\n        FROM {{ ref(\"raw_pedido\") }}\r\n        GROUP BY date_trunc('month', data_pedido) -- Agrupamento por m\u00eas\r\n        ORDER BY mes\r\n    )\r\n\r\nSELECT * FROM faturamento_mensal", "language": "sql", "refs": [{"name": "raw_pedido", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.meu_projeto_dbt.raw_pedido"]}, "compiled_path": "target\\compiled\\meu_projeto_dbt\\models\\raw\\raw_faturamento_mensal.sql", "compiled": true, "compiled_code": "-- Faturamento mensal com formata\u00e7\u00e3o de moeda e total acumulado\nWITH\n    faturamento_mensal AS (\n        SELECT\n            to_char(date_trunc('month', data_pedido), 'YYYY-MM') AS mes, -- Formata\u00e7\u00e3o para o m\u00eas e ano\n            'R$ ' || to_char(sum(total), 'FM999G999G999D99') AS total_faturado, -- Formata\u00e7\u00e3o para o total do m\u00eas\n            'R$ ' || to_char(sum(sum(total)) OVER (\n                                        ORDER BY date_trunc('month', data_pedido)), 'FM999G999G999D99') AS total_faturado_acumulado\n        FROM \"dbt_q4iu\".\"public_raw\".\"raw_pedido\"\n        GROUP BY date_trunc('month', data_pedido) -- Agrupamento por m\u00eas\n        ORDER BY mes\n    )\n\nSELECT * FROM faturamento_mensal", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.meu_projeto_dbt.raw_cliente_pedido_pendente": {"database": "dbt_q4iu", "schema": "public_raw", "name": "raw_cliente_pedido_pendente", "resource_type": "model", "package_name": "meu_projeto_dbt", "path": "raw\\raw_cliente_pedido_pendente.sql", "original_file_path": "models\\raw\\raw_cliente_pedido_pendente.sql", "unique_id": "model.meu_projeto_dbt.raw_cliente_pedido_pendente", "fqn": ["meu_projeto_dbt", "raw", "raw_cliente_pedido_pendente"], "alias": "raw_cliente_pedido_pendente", "checksum": {"name": "sha256", "checksum": "dac23db1785f2d3149ebbdbc0f3f2949f7b6a11fc3d84580d1060c07b5dd208f"}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#c0c0c0"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#c0c0c0"}, "patch_path": null, "build_path": "target\\run\\meu_projeto_dbt\\models\\raw\\raw_cliente_pedido_pendente.sql", "unrendered_config": {"materialized": "table", "schema": "raw", "docs": {"node_color": "#c0c0c0", "show": true}}, "created_at": 1744736078.0915651, "relation_name": "\"dbt_q4iu\".\"public_raw\".\"raw_cliente_pedido_pendente\"", "raw_code": "-- Quantidade de pedidos 'Pendentes' por cliente ->> ultimos 7 dias\r\n-- Sugest\u00e3o aplicar um desconto de acordo com o valor total do pedido, conforme a regra abaixo:\r\n-- Se o valor total do pedido for maior que R$ 1.000,00, aplicar um desconto de 15%\r\n-- Se o valor total do pedido for maior que R$ 500,00, aplicar um desconto de 10%\r\n-- Se o valor total do pedido for menor ou igual a R$ 500,00, n\u00e3o aplicar desconto\r\n\r\n-- Enviar email para o cliente com os pedidos pendentes ->> ultimos 7 dias\r\n-- Sugest\u00e3o enviar email com os dados do pedido, incluindo o valor total com desconto e o percentual de desconto aplicado\r\n\r\nWITH cliente_pedido_pendente AS (\r\n    SELECT\r\n        c.id_cliente,\r\n        FIRST_VALUE(c.primeiro_nome) OVER (PARTITION BY c.id_cliente) AS primeiro_nome,\r\n        c.email,\r\n        p.id_pedido,\r\n        p.data_pedido,\r\n        p.total,\r\n        cv.descricao_canal_venda,\r\n        COUNT(it.id_produto) AS qtd_itens_pedido,\r\n        STRING_AGG(pr.descricao_produto, ',') AS produtos,\r\n\r\n        -- Aplica o desconto\r\n        CASE\r\n            WHEN p.total > 1000 THEN p.total * 0.85  -- Desconto de 15%\r\n            WHEN p.total > 500 THEN p.total * 0.9   -- Desconto de 10%\r\n            ELSE p.total\r\n        END AS total_com_desconto,\r\n\r\n        -- Indica qual desconto foi aplicado\r\n        CASE\r\n            WHEN p.total > 1000 THEN 15\r\n            WHEN p.total > 500 THEN 10\r\n            ELSE 0\r\n        END AS percentual_desconto,\r\n\r\n        -- Contagem de pedidos pendentes por cliente\r\n        COUNT(*) OVER (PARTITION BY c.id_cliente) AS qtd_pedidos_pendentes,\r\n\r\n        -- Soma total de descontos aplicados por cliente\r\n        SUM(\r\n            CASE\r\n                WHEN p.total > 1000 THEN p.total * 0.15\r\n                WHEN p.total > 500 THEN p.total * 0.10\r\n                ELSE 0\r\n            END\r\n        ) OVER (PARTITION BY c.id_cliente) AS valor_desconto\r\n\r\n    FROM {{ ref(\"stg_cliente\") }} c\r\n    INNER JOIN {{ ref(\"raw_pedido\") }} p\r\n        ON c.id_cliente = p.id_cliente\r\n    INNER JOIN {{ ref(\"stg_canais_venda\") }} cv\r\n        ON p.id_canal_venda = cv.id_canal_venda\r\n    INNER JOIN {{ ref(\"stg_itens_pedido\") }} it\r\n        ON p.id_pedido = it.id_pedido\r\n    INNER JOIN {{ ref(\"stg_produto\") }} pr\r\n        ON it.id_produto = pr.id_produto\r\n    WHERE p.id_status = 1\r\n    AND p.data_pedido >= CURRENT_DATE - INTERVAL '7 days'\r\n    GROUP BY\r\n        c.id_cliente, c.primeiro_nome, c.email,\r\n        p.id_pedido, p.data_pedido, p.total,\r\n        cv.descricao_canal_venda\r\n    )\r\nSELECT\r\n    id_cliente,\r\n    primeiro_nome,\r\n    email,\r\n    data_pedido,\r\n    id_pedido,\r\n    qtd_itens_pedido,\r\n    produtos,\r\n    'R$' || TO_CHAR(total, 'FM999G999G999D99') AS total,\r\n    percentual_desconto || '%' AS desconto,\r\n    'R$' || TO_CHAR(valor_desconto, 'FM999G999G999D99') AS valor_desconto,\r\n    'R$' || TO_CHAR(total_com_desconto, 'FM999G999G999D99') AS total_com_desconto,\r\n    'R$' || TO_CHAR(SUM(total_com_desconto) OVER (ORDER BY id_cliente), 'FM999G999G999D99') AS soma_acumulada,\r\n    descricao_canal_venda,\r\n    qtd_pedidos_pendentes\r\nFROM cliente_pedido_pendente\r\nORDER BY id_cliente, id_pedido", "language": "sql", "refs": [{"name": "stg_cliente", "package": null, "version": null}, {"name": "raw_pedido", "package": null, "version": null}, {"name": "stg_canais_venda", "package": null, "version": null}, {"name": "stg_itens_pedido", "package": null, "version": null}, {"name": "stg_produto", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.meu_projeto_dbt.stg_cliente", "model.meu_projeto_dbt.raw_pedido", "model.meu_projeto_dbt.stg_canais_venda", "model.meu_projeto_dbt.stg_itens_pedido", "model.meu_projeto_dbt.stg_produto"]}, "compiled_path": "target\\compiled\\meu_projeto_dbt\\models\\raw\\raw_cliente_pedido_pendente.sql", "compiled": true, "compiled_code": "-- Quantidade de pedidos 'Pendentes' por cliente ->> ultimos 7 dias\n-- Sugest\u00e3o aplicar um desconto de acordo com o valor total do pedido, conforme a regra abaixo:\n-- Se o valor total do pedido for maior que R$ 1.000,00, aplicar um desconto de 15%\n-- Se o valor total do pedido for maior que R$ 500,00, aplicar um desconto de 10%\n-- Se o valor total do pedido for menor ou igual a R$ 500,00, n\u00e3o aplicar desconto\n\n-- Enviar email para o cliente com os pedidos pendentes ->> ultimos 7 dias\n-- Sugest\u00e3o enviar email com os dados do pedido, incluindo o valor total com desconto e o percentual de desconto aplicado\n\nWITH cliente_pedido_pendente AS (\n    SELECT\n        c.id_cliente,\n        FIRST_VALUE(c.primeiro_nome) OVER (PARTITION BY c.id_cliente) AS primeiro_nome,\n        c.email,\n        p.id_pedido,\n        p.data_pedido,\n        p.total,\n        cv.descricao_canal_venda,\n        COUNT(it.id_produto) AS qtd_itens_pedido,\n        STRING_AGG(pr.descricao_produto, ',') AS produtos,\n\n        -- Aplica o desconto\n        CASE\n            WHEN p.total > 1000 THEN p.total * 0.85  -- Desconto de 15%\n            WHEN p.total > 500 THEN p.total * 0.9   -- Desconto de 10%\n            ELSE p.total\n        END AS total_com_desconto,\n\n        -- Indica qual desconto foi aplicado\n        CASE\n            WHEN p.total > 1000 THEN 15\n            WHEN p.total > 500 THEN 10\n            ELSE 0\n        END AS percentual_desconto,\n\n        -- Contagem de pedidos pendentes por cliente\n        COUNT(*) OVER (PARTITION BY c.id_cliente) AS qtd_pedidos_pendentes,\n\n        -- Soma total de descontos aplicados por cliente\n        SUM(\n            CASE\n                WHEN p.total > 1000 THEN p.total * 0.15\n                WHEN p.total > 500 THEN p.total * 0.10\n                ELSE 0\n            END\n        ) OVER (PARTITION BY c.id_cliente) AS valor_desconto\n\n    FROM \"dbt_q4iu\".\"public_staging\".\"stg_cliente\" c\n    INNER JOIN \"dbt_q4iu\".\"public_raw\".\"raw_pedido\" p\n        ON c.id_cliente = p.id_cliente\n    INNER JOIN \"dbt_q4iu\".\"public_staging\".\"stg_canais_venda\" cv\n        ON p.id_canal_venda = cv.id_canal_venda\n    INNER JOIN \"dbt_q4iu\".\"public_staging\".\"stg_itens_pedido\" it\n        ON p.id_pedido = it.id_pedido\n    INNER JOIN \"dbt_q4iu\".\"public_staging\".\"stg_produto\" pr\n        ON it.id_produto = pr.id_produto\n    WHERE p.id_status = 1\n    AND p.data_pedido >= CURRENT_DATE - INTERVAL '7 days'\n    GROUP BY\n        c.id_cliente, c.primeiro_nome, c.email,\n        p.id_pedido, p.data_pedido, p.total,\n        cv.descricao_canal_venda\n    )\nSELECT\n    id_cliente,\n    primeiro_nome,\n    email,\n    data_pedido,\n    id_pedido,\n    qtd_itens_pedido,\n    produtos,\n    'R$' || TO_CHAR(total, 'FM999G999G999D99') AS total,\n    percentual_desconto || '%' AS desconto,\n    'R$' || TO_CHAR(valor_desconto, 'FM999G999G999D99') AS valor_desconto,\n    'R$' || TO_CHAR(total_com_desconto, 'FM999G999G999D99') AS total_com_desconto,\n    'R$' || TO_CHAR(SUM(total_com_desconto) OVER (ORDER BY id_cliente), 'FM999G999G999D99') AS soma_acumulada,\n    descricao_canal_venda,\n    qtd_pedidos_pendentes\nFROM cliente_pedido_pendente\nORDER BY id_cliente, id_pedido", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.meu_projeto_dbt.raw_ticket_medio_cliente": {"database": "dbt_q4iu", "schema": "public_raw", "name": "raw_ticket_medio_cliente", "resource_type": "model", "package_name": "meu_projeto_dbt", "path": "raw\\raw_ticket_medio_cliente.sql", "original_file_path": "models\\raw\\raw_ticket_medio_cliente.sql", "unique_id": "model.meu_projeto_dbt.raw_ticket_medio_cliente", "fqn": ["meu_projeto_dbt", "raw", "raw_ticket_medio_cliente"], "alias": "raw_ticket_medio_cliente", "checksum": {"name": "sha256", "checksum": "e1f30cfb11887a5ca2840a3b93a36ab34ce7defc772b31dcda4e4bf18756dfea"}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#c0c0c0"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#c0c0c0"}, "patch_path": null, "build_path": "target\\run\\meu_projeto_dbt\\models\\raw\\raw_ticket_medio_cliente.sql", "unrendered_config": {"materialized": "table", "schema": "raw", "docs": {"node_color": "#c0c0c0", "show": true}}, "created_at": 1744736078.0935664, "relation_name": "\"dbt_q4iu\".\"public_raw\".\"raw_ticket_medio_cliente\"", "raw_code": "-- Total de pedidos e ticket medio por cliente com status de entrega como ENTREGUE\r\nWITH \r\n    ticket_medio_por_cliente AS(\r\n        SELECT\r\n            c.id_cliente,\r\n            c.primeiro_nome,\r\n            c.email,\r\n            c.telefone,\r\n            count(p.id_pedido) AS qtd_pedidos, -- Total de pedidos\r\n            round(cast(avg(p.total) AS numeric), 2) AS ticket_medio -- Ticket m\u00e9sio\r\n\r\n        FROM {{ ref(\"stg_cliente\") }} c\r\n        LEFT JOIN {{ ref(\"raw_pedido\") }} p ON c.id_cliente = p.id_cliente\r\n        WHERE p.id_status = 4 -- Filtrando por status de entrega como ENTREGUE\r\n\r\n        GROUP BY c.id_cliente,\r\n                 c.primeiro_nome,\r\n                 c.email,\r\n                 c.telefone -- Agrupando por id_cliente, primeiro_nome, email, telefone\r\n)\r\nSELECT\r\n    id_cliente,\r\n    primeiro_nome,\r\n    email,\r\n    telefone,\r\n    qtd_pedidos,\r\n    'R$' || TO_CHAR(ticket_medio, 'FM999G999G999D99') AS ticket_medio -- Formata o total para moeda brasileira\r\nFROM ticket_medio_por_cliente\r\nWHERE ticket_medio IS NOT NULL -- Filtrando por ticket_medio n\u00e3o nulo\r\nORDER BY id_cliente ASC -- Ordenando por ticket_medio em ordem decrescente", "language": "sql", "refs": [{"name": "stg_cliente", "package": null, "version": null}, {"name": "raw_pedido", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.meu_projeto_dbt.stg_cliente", "model.meu_projeto_dbt.raw_pedido"]}, "compiled_path": "target\\compiled\\meu_projeto_dbt\\models\\raw\\raw_ticket_medio_cliente.sql", "compiled": true, "compiled_code": "-- Total de pedidos e ticket medio por cliente com status de entrega como ENTREGUE\nWITH \n    ticket_medio_por_cliente AS(\n        SELECT\n            c.id_cliente,\n            c.primeiro_nome,\n            c.email,\n            c.telefone,\n            count(p.id_pedido) AS qtd_pedidos, -- Total de pedidos\n            round(cast(avg(p.total) AS numeric), 2) AS ticket_medio -- Ticket m\u00e9sio\n\n        FROM \"dbt_q4iu\".\"public_staging\".\"stg_cliente\" c\n        LEFT JOIN \"dbt_q4iu\".\"public_raw\".\"raw_pedido\" p ON c.id_cliente = p.id_cliente\n        WHERE p.id_status = 4 -- Filtrando por status de entrega como ENTREGUE\n\n        GROUP BY c.id_cliente,\n                 c.primeiro_nome,\n                 c.email,\n                 c.telefone -- Agrupando por id_cliente, primeiro_nome, email, telefone\n)\nSELECT\n    id_cliente,\n    primeiro_nome,\n    email,\n    telefone,\n    qtd_pedidos,\n    'R$' || TO_CHAR(ticket_medio, 'FM999G999G999D99') AS ticket_medio -- Formata o total para moeda brasileira\nFROM ticket_medio_por_cliente\nWHERE ticket_medio IS NOT NULL -- Filtrando por ticket_medio n\u00e3o nulo\nORDER BY id_cliente ASC -- Ordenando por ticket_medio em ordem decrescente", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.meu_projeto_dbt.raw_valor_total_canal_venda": {"database": "dbt_q4iu", "schema": "public_raw", "name": "raw_valor_total_canal_venda", "resource_type": "model", "package_name": "meu_projeto_dbt", "path": "raw\\raw_valor_total_canal_venda.sql", "original_file_path": "models\\raw\\raw_valor_total_canal_venda.sql", "unique_id": "model.meu_projeto_dbt.raw_valor_total_canal_venda", "fqn": ["meu_projeto_dbt", "raw", "raw_valor_total_canal_venda"], "alias": "raw_valor_total_canal_venda", "checksum": {"name": "sha256", "checksum": "60598d565ea7278ba62ea81c810c7f53eddd086bd1963b2d1d2e0bdd4c57122d"}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#c0c0c0"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#c0c0c0"}, "patch_path": null, "build_path": "target\\run\\meu_projeto_dbt\\models\\raw\\raw_valor_total_canal_venda.sql", "unrendered_config": {"materialized": "table", "schema": "raw", "docs": {"node_color": "#c0c0c0", "show": true}}, "created_at": 1745451370.3054686, "relation_name": "\"dbt_q4iu\".\"public_raw\".\"raw_valor_total_canal_venda\"", "raw_code": "-- Modelo para calcular o valor total por canal de venda\r\nWITH\r\n    total_por_canal_venda AS (\r\n        SELECT\r\n            cv.descricao_canal_venda,\r\n            SUM(p.total) AS total -- Total por canal de venda\r\n        FROM {{ ref(\"raw_pedido\") }} p\r\n        JOIN {{ ref(\"stg_canais_venda\") }} cv ON p.id_canal_venda = cv.id_canal_venda\r\n        GROUP BY cv.descricao_canal_venda\r\n    )\r\n\r\nSELECT\r\n    descricao_canal_venda,\r\n    to_char(total, 'L999G999G999D99') AS total_formatado, -- Formata o total com s\u00edmbolo de moeda\r\n    ROUND((total * 100.0 / nullif(\r\n        (SELECT SUM(total)\r\n        FROM total_por_canal_venda), 0))::numeric, 2) AS percentual -- Percentual do total\r\nFROM total_por_canal_venda\r\nORDER BY total DESC -- Ordenar por total decrescente", "language": "sql", "refs": [{"name": "raw_pedido", "package": null, "version": null}, {"name": "stg_canais_venda", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.meu_projeto_dbt.raw_pedido", "model.meu_projeto_dbt.stg_canais_venda"]}, "compiled_path": "target\\compiled\\meu_projeto_dbt\\models\\raw\\raw_valor_total_canal_venda.sql", "compiled": true, "compiled_code": "-- Modelo para calcular o valor total por canal de venda\nWITH\n    total_por_canal_venda AS (\n        SELECT\n            cv.descricao_canal_venda,\n            SUM(p.total) AS total -- Total por canal de venda\n        FROM \"dbt_q4iu\".\"public_raw\".\"raw_pedido\" p\n        JOIN \"dbt_q4iu\".\"public_staging\".\"stg_canais_venda\" cv ON p.id_canal_venda = cv.id_canal_venda\n        GROUP BY cv.descricao_canal_venda\n    )\n\nSELECT\n    descricao_canal_venda,\n    to_char(total, 'L999G999G999D99') AS total_formatado, -- Formata o total com s\u00edmbolo de moeda\n    ROUND((total * 100.0 / nullif(\n        (SELECT SUM(total)\n        FROM total_por_canal_venda), 0))::numeric, 2) AS percentual -- Percentual do total\nFROM total_por_canal_venda\nORDER BY total DESC -- Ordenar por total decrescente", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}}, "sources": {}, "macros": {"macro.dbt_postgres.postgres__create_table_as": {"name": "postgres__create_table_as", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n  {% endif -%}\n  {% if contract_config.enforced and (not temporary) -%}\n      {{ get_table_columns_and_constraints() }} ;\n    insert into {{ relation }} (\n      {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    )\n    {%- set sql = get_select_subquery(sql) %}\n  {% else %}\n    as\n  {% endif %}\n  (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.default__get_column_names", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4141653, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_index_sql": {"name": "postgres__get_create_index_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4151633, "supported_languages": null}, "macro.dbt_postgres.postgres__create_schema": {"name": "postgres__create_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4151633, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_schema": {"name": "postgres__drop_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_postgres.postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4161618, "supported_languages": null}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"name": "postgres__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4181638, "supported_languages": null}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"name": "postgres__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.419164, "supported_languages": null}, "macro.dbt_postgres.postgres__information_schema_name": {"name": "postgres__information_schema_name", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_postgres.postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.419164, "supported_languages": null}, "macro.dbt_postgres.postgres__list_schemas": {"name": "postgres__list_schemas", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.419164, "supported_languages": null}, "macro.dbt_postgres.postgres__check_schema_exists": {"name": "postgres__check_schema_exists", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4201708, "supported_languages": null}, "macro.dbt_postgres.postgres__make_relation_with_suffix": {"name": "postgres__make_relation_with_suffix", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_relation_with_suffix", "macro_sql": "{% macro postgres__make_relation_with_suffix(base_relation, suffix, dstring) %}\n    {% if dstring %}\n      {% set dt = modules.datetime.datetime.now() %}\n      {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n      {% set suffix = suffix ~ dtstring %}\n    {% endif %}\n    {% set suffix_length = suffix|length %}\n    {% set relation_max_name_length = base_relation.relation_max_name_length() %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Relation suffix is too long (' ~ suffix_length ~ ' characters). Maximum length is ' ~ relation_max_name_length ~ ' characters.') %}\n    {% endif %}\n    {% set identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix %}\n\n    {{ return(base_relation.incorporate(path={\"identifier\": identifier })) }}\n\n  {% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.42217, "supported_languages": null}, "macro.dbt_postgres.postgres__make_intermediate_relation": {"name": "postgres__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_intermediate_relation", "macro_sql": "{% macro postgres__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(postgres__make_relation_with_suffix(base_relation, suffix, dstring=False)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.42217, "supported_languages": null}, "macro.dbt_postgres.postgres__make_temp_relation": {"name": "postgres__make_temp_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set temp_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=True) %}\n    {{ return(temp_relation.incorporate(path={\"schema\": none,\n                                              \"database\": none})) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.42217, "supported_languages": null}, "macro.dbt_postgres.postgres__make_backup_relation": {"name": "postgres__make_backup_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_backup_relation", "macro_sql": "{% macro postgres__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {% set backup_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=False) %}\n    {{ return(backup_relation.incorporate(type=backup_relation_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.423168, "supported_languages": null}, "macro.dbt_postgres.postgres_escape_comment": {"name": "postgres_escape_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_postgres.postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4241686, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_relation_comment": {"name": "postgres__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  {% if relation.type == 'materialized_view' -%}\n    {% set relation_type = \"materialized view\" %}\n  {%- else -%}\n    {%- set relation_type = relation.type -%}\n  {%- endif -%}\n  comment on {{ relation_type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4241686, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_column_comment": {"name": "postgres__alter_column_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4251692, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_grant_sql": {"name": "postgres__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_show_grant_sql", "macro_sql": "\n\n{%- macro postgres__get_show_grant_sql(relation) -%}\n  select grantee, privilege_type\n  from {{ relation.information_schema('role_table_grants') }}\n      where grantor = current_role\n        and grantee != current_role\n        and table_schema = '{{ relation.schema }}'\n        and table_name = '{{ relation.identifier }}'\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4261694, "supported_languages": null}, "macro.dbt_postgres.postgres__copy_grants": {"name": "postgres__copy_grants", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_postgres.postgres__copy_grants", "macro_sql": "{% macro postgres__copy_grants() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4261694, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_indexes_sql": {"name": "postgres__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_show_indexes_sql", "macro_sql": "{% macro postgres__get_show_indexes_sql(relation) %}\n    select\n        i.relname                                   as name,\n        m.amname                                    as method,\n        ix.indisunique                              as \"unique\",\n        array_to_string(array_agg(a.attname), ',')  as column_names\n    from pg_index ix\n    join pg_class i\n        on i.oid = ix.indexrelid\n    join pg_am m\n        on m.oid=i.relam\n    join pg_class t\n        on t.oid = ix.indrelid\n    join pg_namespace n\n        on n.oid = t.relnamespace\n    join pg_attribute a\n        on a.attrelid = t.oid\n        and a.attnum = ANY(ix.indkey)\n    where t.relname = '{{ relation.identifier }}'\n      and n.nspname = '{{ relation.schema }}'\n      and t.relkind in ('r', 'm')\n    group by 1, 2, 3\n    order by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4261694, "supported_languages": null}, "macro.dbt_postgres.postgres__get_drop_index_sql": {"name": "postgres__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_drop_index_sql", "macro_sql": "\n\n\n{%- macro postgres__get_drop_index_sql(relation, index_name) -%}\n    drop index if exists \"{{ relation.schema }}\".\"{{ index_name }}\"\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4271705, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog_relations": {"name": "postgres__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_postgres.postgres__get_catalog_relations", "macro_sql": "{% macro postgres__get_catalog_relations(information_schema, relations) -%}\r\n    {%- call statement(\"catalog\", fetch_result=True) -%}\r\n\r\n        {#\r\n      If the user has multiple databases set and the first one is wrong, this will fail.\r\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\r\n    #}\r\n        {% set database = information_schema.database %}\r\n        {{ adapter.verify_database(database) }}\r\n\r\n        select\r\n            '{{ database }}' as table_database,\r\n            sch.nspname as table_schema,\r\n            tbl.relname as table_name,\r\n            case\r\n                tbl.relkind\r\n                when 'v'\r\n                then 'VIEW'\r\n                when 'm'\r\n                then 'MATERIALIZED VIEW'\r\n                else 'BASE TABLE'\r\n            end as table_type,\r\n            tbl_desc.description as table_comment,\r\n            col.attname as column_name,\r\n            col.attnum as column_index,\r\n            pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\r\n            col_desc.description as column_comment,\r\n            pg_get_userbyid(tbl.relowner) as table_owner\r\n\r\n        from pg_catalog.pg_namespace sch\r\n        join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\r\n        join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\r\n        left outer join\r\n            pg_catalog.pg_description tbl_desc\r\n            on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\r\n        left outer join\r\n            pg_catalog.pg_description col_desc\r\n            on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\r\n        where\r\n            (\r\n                {%- for relation in relations -%}\r\n                    {%- if relation.identifier -%}\r\n                        (\r\n                            upper(sch.nspname) = upper('{{ relation.schema }}')\r\n                            and upper(tbl.relname) = upper('{{ relation.identifier }}')\r\n                        )\r\n                    {%- else -%}upper(sch.nspname) = upper('{{ relation.schema }}')\r\n                    {%- endif -%}\r\n                    {%- if not loop.last %} or {% endif -%}\r\n                {%- endfor -%}\r\n            )\r\n            and not pg_is_other_temp_schema(sch.oid)  -- not a temporary schema belonging to another session\r\n            and tbl.relpersistence in ('p', 'u')  -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\r\n            and tbl.relkind in ('r', 'v', 'f', 'p', 'm')  -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table, [m]aterialized view. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table\r\n            and col.attnum > 0  -- negative numbers are used for system columns such as oid\r\n            and not col.attisdropped  -- column as not been dropped\r\n\r\n        order by sch.nspname, tbl.relname, col.attnum\r\n\r\n    {%- endcall -%}\r\n\r\n    {{ return(load_result(\"catalog\").table) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4281716, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog": {"name": "postgres__get_catalog", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_postgres.postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\r\n    {%- set relations = [] -%}\r\n    {%- for schema in schemas -%}\r\n        {%- set dummy = relations.append({\"schema\": schema}) -%}\r\n    {%- endfor -%}\r\n    {{ return(postgres__get_catalog_relations(information_schema, relations)) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4291692, "supported_languages": null}, "macro.dbt_postgres.postgres__get_relations": {"name": "postgres__get_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\relations.sql", "original_file_path": "macros\\relations.sql", "unique_id": "macro.dbt_postgres.postgres__get_relations", "macro_sql": "{% macro postgres__get_relations() -%}\r\n\r\n    {#\r\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\r\n      --  > a pg_depend entry indicates that the referenced object cannot be\r\n      --  > dropped without also dropping the dependent object.\r\n  #}\r\n    {%- call statement(\"relations\", fetch_result=True) -%}\r\n        with\r\n            relation as (\r\n                select pg_rewrite.ev_class as class, pg_rewrite.oid as id\r\n                from pg_rewrite\r\n            ),\r\n            class as (\r\n                select\r\n                    oid as id, relname as name, relnamespace as schema, relkind as kind\r\n                from pg_class\r\n            ),\r\n            dependency as (\r\n                select distinct pg_depend.objid as id, pg_depend.refobjid as ref\r\n                from pg_depend\r\n            ),\r\n            schema as (\r\n                select pg_namespace.oid as id, pg_namespace.nspname as name\r\n                from pg_namespace\r\n                where nspname != 'information_schema' and nspname not like 'pg\\_%'\r\n            ),\r\n            referenced as (\r\n                select\r\n                    relation.id as id,\r\n                    referenced_class.name,\r\n                    referenced_class.schema,\r\n                    referenced_class.kind\r\n                from relation\r\n                join class as referenced_class on relation.class = referenced_class.id\r\n                where referenced_class.kind in ('r', 'v', 'm')\r\n            ),\r\n            relationships as (\r\n                select\r\n                    referenced.name as referenced_name,\r\n                    referenced.schema as referenced_schema_id,\r\n                    dependent_class.name as dependent_name,\r\n                    dependent_class.schema as dependent_schema_id,\r\n                    referenced.kind as kind\r\n                from referenced\r\n                join dependency on referenced.id = dependency.id\r\n                join class as dependent_class on dependency.ref = dependent_class.id\r\n                where\r\n                    (\r\n                        referenced.name != dependent_class.name\r\n                        or referenced.schema != dependent_class.schema\r\n                    )\r\n            )\r\n\r\n        select\r\n            referenced_schema.name as referenced_schema,\r\n            relationships.referenced_name as referenced_name,\r\n            dependent_schema.name as dependent_schema,\r\n            relationships.dependent_name as dependent_name\r\n        from relationships\r\n        join\r\n            schema as dependent_schema\r\n            on relationships.dependent_schema_id = dependent_schema.id\r\n        join\r\n            schema as referenced_schema\r\n            on relationships.referenced_schema_id = referenced_schema.id\r\n        group by referenced_schema, referenced_name, dependent_schema, dependent_name\r\n        order by referenced_schema, referenced_name, dependent_schema, dependent_name\r\n        ;\r\n\r\n    {%- endcall -%}\r\n\r\n    {{ return(load_result(\"relations\").table) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4301705, "supported_languages": null}, "macro.dbt_postgres.postgres_get_relations": {"name": "postgres_get_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\relations.sql", "original_file_path": "macros\\relations.sql", "unique_id": "macro.dbt_postgres.postgres_get_relations", "macro_sql": "{% macro postgres_get_relations() %}\r\n    {{ return(postgres__get_relations()) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4301705, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp": {"name": "postgres__current_timestamp", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\timestamps.sql", "original_file_path": "macros\\timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%} now() {%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4301705, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"name": "postgres__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\timestamps.sql", "original_file_path": "macros\\timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\r\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\r\n    {{ return(result) }}\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4311683, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_get_time": {"name": "postgres__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\timestamps.sql", "original_file_path": "macros\\timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\r\n    {{ current_timestamp() }}::timestamp without time zone\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4311683, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_backcompat": {"name": "postgres__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\timestamps.sql", "original_file_path": "macros\\timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_backcompat", "macro_sql": "{% macro postgres__current_timestamp_backcompat() %}\r\n    current_timestamp::{{ type_timestamp() }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4311683, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat": {"name": "postgres__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\timestamps.sql", "original_file_path": "macros\\timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro postgres__current_timestamp_in_utc_backcompat() %}\r\n    (current_timestamp at time zone 'utc')::{{ type_timestamp() }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4311683, "supported_languages": null}, "macro.dbt_postgres.postgres__get_incremental_default_sql": {"name": "postgres__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\materializations\\incremental_strategies.sql", "original_file_path": "macros\\materializations\\incremental_strategies.sql", "unique_id": "macro.dbt_postgres.postgres__get_incremental_default_sql", "macro_sql": "{% macro postgres__get_incremental_default_sql(arg_dict) %}\r\n\r\n    {% if arg_dict[\"unique_key\"] %}\r\n        {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\r\n    {% else %} {% do return(get_incremental_append_sql(arg_dict)) %}\r\n    {% endif %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql", "macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4321682, "supported_languages": null}, "macro.dbt_postgres.postgres__get_incremental_microbatch_sql": {"name": "postgres__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\materializations\\incremental_strategies.sql", "original_file_path": "macros\\materializations\\incremental_strategies.sql", "unique_id": "macro.dbt_postgres.postgres__get_incremental_microbatch_sql", "macro_sql": "{% macro postgres__get_incremental_microbatch_sql(arg_dict) %}\r\n\r\n    {% if arg_dict[\"unique_key\"] %}\r\n        {% do return(adapter.dispatch(\"get_incremental_merge_sql\", \"dbt\")(arg_dict)) %}\r\n    {% else %}\r\n        {{\r\n            exceptions.raise_compiler_error(\r\n                \"dbt-postgres 'microbatch' requires a `unique_key` config\"\r\n            )\r\n        }}\r\n    {% endif %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql", "macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4321682, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"name": "postgres__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\materializations\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshot_merge.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    update {{ target }}\n    set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }}::text = {{ target }}.{{ columns.dbt_scd_id }}::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      {% if config.get(\"dbt_valid_to_current\") %}\n        and ({{ target }}.{{ columns.dbt_valid_to }} = {{ config.get('dbt_valid_to_current') }} or {{ target }}.{{ columns.dbt_valid_to }} is null);\n      {% else %}\n        and {{ target }}.{{ columns.dbt_valid_to }} is null;\n      {% endif %}\n\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4346728, "supported_languages": null}, "macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql": {"name": "postgres__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql", "macro_sql": "{% macro postgres__get_alter_materialized_view_as_sql(\r\n    relation,\r\n    configuration_changes,\r\n    sql,\r\n    existing_relation,\r\n    backup_relation,\r\n    intermediate_relation\r\n) %}\r\n\r\n    -- apply a full refresh immediately if needed\r\n    {% if configuration_changes.requires_full_refresh %}\r\n\r\n        {{ get_replace_sql(existing_relation, relation, sql) }}\r\n\r\n    -- otherwise apply individual changes as needed\r\n    {% else %}\r\n\r\n        {{\r\n            postgres__update_indexes_on_materialized_view(\r\n                relation, configuration_changes.indexes\r\n            )\r\n        }}\r\n\r\n    {%- endif -%}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql", "macro.dbt_postgres.postgres__update_indexes_on_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4356785, "supported_languages": null}, "macro.dbt_postgres.postgres__update_indexes_on_materialized_view": {"name": "postgres__update_indexes_on_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt_postgres.postgres__update_indexes_on_materialized_view", "macro_sql": "\r\n\r\n\r\n{%- macro postgres__update_indexes_on_materialized_view(relation, index_changes) -%}\r\n    {{- log(\"Applying UPDATE INDEXES to: \" ~ relation) -}}\r\n\r\n    {%- for _index_change in index_changes -%}\r\n        {%- set _index = _index_change.context -%}\r\n\r\n        {%- if _index_change.action == \"drop\" -%}\r\n\r\n            {{ postgres__get_drop_index_sql(relation, _index.name) }}\r\n\r\n        {%- elif _index_change.action == \"create\" -%}\r\n\r\n            {{ postgres__get_create_index_sql(relation, _index.as_node_config) }}\r\n\r\n        {%- endif -%}\r\n        {{ \";\" if not loop.last else \"\" }}\r\n\r\n    {%- endfor -%}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_drop_index_sql", "macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4366834, "supported_languages": null}, "macro.dbt_postgres.postgres__get_materialized_view_configuration_changes": {"name": "postgres__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt_postgres.postgres__get_materialized_view_configuration_changes", "macro_sql": "{% macro postgres__get_materialized_view_configuration_changes(\r\n    existing_relation, new_config\r\n) %}\r\n    {% set _existing_materialized_view = postgres__describe_materialized_view(\r\n        existing_relation\r\n    ) %}\r\n    {% set _configuration_changes = (\r\n        existing_relation.get_materialized_view_config_change_collection(\r\n            _existing_materialized_view, new_config.model\r\n        )\r\n    ) %}\r\n    {% do return(_configuration_changes) %}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__describe_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4366834, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_materialized_view_as_sql": {"name": "postgres__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\relations\\materialized_view\\create.sql", "original_file_path": "macros\\relations\\materialized_view\\create.sql", "unique_id": "macro.dbt_postgres.postgres__get_create_materialized_view_as_sql", "macro_sql": "{% macro postgres__get_create_materialized_view_as_sql(relation, sql) %}\r\n    create materialized view if not exists {{ relation }} as {{ sql }};\r\n\r\n    {% for _index_dict in config.get(\"indexes\", []) -%}\r\n        {{- get_create_index_sql(relation, _index_dict) -}}\r\n        {{ (\";\" if not loop.last else \"\") }}\r\n    {%- endfor -%}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.437696, "supported_languages": null}, "macro.dbt_postgres.postgres__describe_materialized_view": {"name": "postgres__describe_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\relations\\materialized_view\\describe.sql", "original_file_path": "macros\\relations\\materialized_view\\describe.sql", "unique_id": "macro.dbt_postgres.postgres__describe_materialized_view", "macro_sql": "{% macro postgres__describe_materialized_view(relation) %}\r\n    -- for now just get the indexes, we don't need the name or the query yet\r\n    {% set _indexes = run_query(get_show_indexes_sql(relation)) %}\r\n    {% do return({\"indexes\": _indexes}) %}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4386778, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_materialized_view": {"name": "postgres__drop_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\relations\\materialized_view\\drop.sql", "original_file_path": "macros\\relations\\materialized_view\\drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_materialized_view", "macro_sql": "{% macro postgres__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4386778, "supported_languages": null}, "macro.dbt_postgres.postgres__refresh_materialized_view": {"name": "postgres__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\relations\\materialized_view\\refresh.sql", "original_file_path": "macros\\relations\\materialized_view\\refresh.sql", "unique_id": "macro.dbt_postgres.postgres__refresh_materialized_view", "macro_sql": "{% macro postgres__refresh_materialized_view(relation) %}\n    refresh materialized view {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4386778, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_materialized_view_sql": {"name": "postgres__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\relations\\materialized_view\\rename.sql", "original_file_path": "macros\\relations\\materialized_view\\rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_materialized_view_sql", "macro_sql": "{% macro postgres__get_rename_materialized_view_sql(relation, new_name) %}\n    alter materialized view {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.43968, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_table": {"name": "postgres__drop_table", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\relations\\table\\drop.sql", "original_file_path": "macros\\relations\\table\\drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_table", "macro_sql": "{% macro postgres__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.43968, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_table_sql": {"name": "postgres__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\relations\\table\\rename.sql", "original_file_path": "macros\\relations\\table\\rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_table_sql", "macro_sql": "{% macro postgres__get_rename_table_sql(relation, new_name) %}\n    alter table {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.43968, "supported_languages": null}, "macro.dbt_postgres.postgres__get_replace_table_sql": {"name": "postgres__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\relations\\table\\replace.sql", "original_file_path": "macros\\relations\\table\\replace.sql", "unique_id": "macro.dbt_postgres.postgres__get_replace_table_sql", "macro_sql": "{% macro postgres__get_replace_table_sql(relation, sql) -%}\r\n\r\n    {%- set sql_header = config.get(\"sql_header\", none) -%}\r\n    {{ sql_header if sql_header is not none }}\r\n\r\n    create or replace table {{ relation }}\r\n    {% set contract_config = config.get(\"contract\") %}\r\n    {% if contract_config.enforced %}\r\n        {{ get_assert_columns_equivalent(sql) }}\r\n        {{ get_table_columns_and_constraints() }}\r\n        {%- set sql = get_select_subquery(sql) %}\r\n    {% endif %}\r\n    as (\r\n    {{ sql }}\r\n    );\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4412372, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_view": {"name": "postgres__drop_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\relations\\view\\drop.sql", "original_file_path": "macros\\relations\\view\\drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_view", "macro_sql": "{% macro postgres__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4412372, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_view_sql": {"name": "postgres__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\relations\\view\\rename.sql", "original_file_path": "macros\\relations\\view\\rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_view_sql", "macro_sql": "{% macro postgres__get_rename_view_sql(relation, new_name) %}\n    alter view {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4412372, "supported_languages": null}, "macro.dbt_postgres.postgres__get_replace_view_sql": {"name": "postgres__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt_postgres.postgres__get_replace_view_sql", "macro_sql": "{% macro postgres__get_replace_view_sql(relation, sql) -%}\r\n\r\n    {%- set sql_header = config.get(\"sql_header\", none) -%}\r\n    {{ sql_header if sql_header is not none }}\r\n\r\n    create or replace view {{ relation }}\r\n    {% set contract_config = config.get(\"contract\") %}\r\n    {% if contract_config.enforced %}\r\n        {{ get_assert_columns_equivalent(sql) }}\r\n    {%- endif %}\r\n    as (\r\n    {{ sql }}\r\n    );\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.442244, "supported_languages": null}, "macro.dbt_postgres.postgres__any_value": {"name": "postgres__any_value", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt_postgres.postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%} min({{ expression }}) {%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.442244, "supported_languages": null}, "macro.dbt_postgres.postgres__dateadd": {"name": "postgres__dateadd", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt_postgres.postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.443244, "supported_languages": null}, "macro.dbt_postgres.postgres__datediff": {"name": "postgres__datediff", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt_postgres.postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\r\n\r\n    {% if datepart == \"year\" %}\r\n        (\r\n            date_part('year', ({{ second_date }})::date)\r\n            - date_part('year', ({{ first_date }})::date)\r\n        )\r\n    {% elif datepart == \"quarter\" %}\r\n        (\r\n            {{ datediff(first_date, second_date, \"year\") }} * 4\r\n            + date_part('quarter', ({{ second_date }})::date)\r\n            - date_part('quarter', ({{ first_date }})::date)\r\n        )\r\n    {% elif datepart == \"month\" %}\r\n        (\r\n            {{ datediff(first_date, second_date, \"year\") }} * 12\r\n            + date_part('month', ({{ second_date }})::date)\r\n            - date_part('month', ({{ first_date }})::date)\r\n        )\r\n    {% elif datepart == \"day\" %} (({{ second_date }})::date - ({{ first_date }})::date)\r\n    {% elif datepart == \"week\" %}\r\n        (\r\n            {{ datediff(first_date, second_date, \"day\") }} / 7 + case\r\n                when\r\n                    date_part('dow', ({{ first_date }})::timestamp)\r\n                    <= date_part('dow', ({{ second_date }})::timestamp)\r\n                then case when {{ first_date }} <= {{ second_date }} then 0 else -1 end\r\n                else case when {{ first_date }} <= {{ second_date }} then 1 else 0 end\r\n            end\r\n        )\r\n    {% elif datepart == \"hour\" %}\r\n        (\r\n            {{ datediff(first_date, second_date, \"day\") }} * 24\r\n            + date_part('hour', ({{ second_date }})::timestamp)\r\n            - date_part('hour', ({{ first_date }})::timestamp)\r\n        )\r\n    {% elif datepart == \"minute\" %}\r\n        (\r\n            {{ datediff(first_date, second_date, \"hour\") }} * 60\r\n            + date_part('minute', ({{ second_date }})::timestamp)\r\n            - date_part('minute', ({{ first_date }})::timestamp)\r\n        )\r\n    {% elif datepart == \"second\" %}\r\n        (\r\n            {{ datediff(first_date, second_date, \"minute\") }} * 60\r\n            + floor(date_part('second', ({{ second_date }})::timestamp))\r\n            - floor(date_part('second', ({{ first_date }})::timestamp))\r\n        )\r\n    {% elif datepart == \"millisecond\" %}\r\n        (\r\n            {{ datediff(first_date, second_date, \"minute\") }} * 60000\r\n            + floor(date_part('millisecond', ({{ second_date }})::timestamp))\r\n            - floor(date_part('millisecond', ({{ first_date }})::timestamp))\r\n        )\r\n    {% elif datepart == \"microsecond\" %}\r\n        (\r\n            {{ datediff(first_date, second_date, \"minute\") }} * 60000000\r\n            + floor(date_part('microsecond', ({{ second_date }})::timestamp))\r\n            - floor(date_part('microsecond', ({{ first_date }})::timestamp))\r\n        )\r\n    {% else %}\r\n        {{\r\n            exceptions.raise_compiler_error(\r\n                \"Unsupported datepart for macro datediff in postgres: {!r}\".format(\r\n                    datepart\r\n                )\r\n            )\r\n        }}\r\n    {% endif %}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4462435, "supported_languages": null}, "macro.dbt_postgres.postgres__last_day": {"name": "postgres__last_day", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt_postgres.postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\r\n\r\n    {%- if datepart == \"quarter\" -%}\r\n        -- postgres dateadd does not support quarter interval.\r\n        cast(\r\n            {{\r\n                dbt.dateadd(\r\n                    \"day\",\r\n                    \"-1\",\r\n                    dbt.dateadd(\"month\", \"3\", dbt.date_trunc(datepart, date)),\r\n                )\r\n            }} as date\r\n        )\r\n    {%- else -%} {{ dbt.default_last_day(date, datepart) }}\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.447243, "supported_languages": null}, "macro.dbt_postgres.postgres__listagg": {"name": "postgres__listagg", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt_postgres.postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\r\n\r\n    {% if limit_num -%}\r\n        array_to_string(\r\n            (\r\n                array_agg(\r\n                    {{ measure }}\r\n                    {% if order_by_clause -%} {{ order_by_clause }} {%- endif %}\r\n                )\r\n            )[1:{{ limit_num }}],\r\n            {{ delimiter_text }}\r\n        )\r\n    {%- else %}\r\n        string_agg(\r\n            {{ measure }},\r\n            {{ delimiter_text }}\r\n            {% if order_by_clause -%} {{ order_by_clause }}\r\n            {%- endif %}\r\n        )\r\n    {%- endif %}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4482436, "supported_languages": null}, "macro.dbt_postgres.postgres__split_part": {"name": "postgres__split_part", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt_postgres.postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\r\n\r\n    {% if part_number >= 0 %}\r\n        {{ dbt.default__split_part(string_text, delimiter_text, part_number) }}\r\n    {% else %} {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\r\n    {% endif %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part", "macro.dbt._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4482436, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\r\n    {{ return(adapter.dispatch(\"copy_grants\", \"dbt\")()) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4502423, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %} {{ return(True) }} {% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4502423, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\r\n    {{\r\n        return(\r\n            adapter.dispatch(\"support_multiple_grantees_per_dcl_statement\", \"dbt\")()\r\n        )\r\n    }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4512439, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\r\n\r\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\r\n    {{ return(True) }}\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4512439, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\r\n\r\n    {% if not existing_relation %}\r\n        {#- - The table doesn't already exist, so no grants to copy over --#}\r\n        {{ return(False) }}\r\n    {% elif full_refresh_mode %}\r\n        {#- - The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\r\n        {{ return(copy_grants()) }}\r\n    {% else %}\r\n        {#- - The table is being merged/upserted/inserted -- grants will be carried over --#}\r\n        {{ return(True) }}\r\n    {% endif %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4512439, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\r\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4522429, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\r\n    show grants on {{ relation.render() }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4522429, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\r\n    {{\r\n        return(\r\n            adapter.dispatch(\"get_grant_sql\", \"dbt\")(relation, privilege, grantees)\r\n        )\r\n    }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4522429, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\r\n\r\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\r\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(\", \") }}\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4522429, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\r\n    {{\r\n        return(\r\n            adapter.dispatch(\"get_revoke_sql\", \"dbt\")(relation, privilege, grantees)\r\n        )\r\n    }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4532425, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\r\n\r\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\r\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(\", \") }}\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4532425, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\r\n    {{\r\n        return(\r\n            adapter.dispatch(\"get_dcl_statement_list\", \"dbt\")(\r\n                relation, grant_config, get_dcl_macro\r\n            )\r\n        )\r\n    }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4542437, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\r\n\r\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\r\n    {#\r\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\r\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\r\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\r\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\r\n    #}\r\n    {%- set dcl_statements = [] -%}\r\n    {%- for privilege, grantees in grant_config.items() %}\r\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\r\n            {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\r\n            {%- do dcl_statements.append(dcl) -%}\r\n        {%- else -%}\r\n            {%- for grantee in grantees -%}\r\n                {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\r\n                {%- do dcl_statements.append(dcl) -%}\r\n            {% endfor -%}\r\n        {%- endif -%}\r\n    {%- endfor -%}\r\n    {{ return(dcl_statements) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.455243, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\r\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.455243, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\r\n    {#\r\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\r\n      -- so that they're all processed together.\r\n\r\n      -- Some databases do not support this. Those adapters will need to override this macro\r\n      -- to run each statement individually.\r\n    #}\r\n    {% call statement(\"grants\") %}\r\n        {% for dcl_statement in dcl_statement_list %}\r\n            {{ dcl_statement }}\r\n            ;\r\n        {% endfor %}\r\n    {% endcall %}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.456243, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\r\n    {{\r\n        return(\r\n            adapter.dispatch(\"apply_grants\", \"dbt\")(\r\n                relation, grant_config, should_revoke\r\n            )\r\n        )\r\n    }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.456243, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\r\n    {#- - If grant_config is {} or None, this is a no-op --#}\r\n    {% if grant_config %}\r\n        {% if should_revoke %}\r\n            {#- - We think previous grants may have carried over --#}\r\n            {#- - Show current grants and calculate diffs --#}\r\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\r\n            {% set current_grants_dict = adapter.standardize_grants_dict(\r\n                current_grants_table\r\n            ) %}\r\n            {% set needs_granting = diff_of_two_dicts(\r\n                grant_config, current_grants_dict\r\n            ) %}\r\n            {% set needs_revoking = diff_of_two_dicts(\r\n                current_grants_dict, grant_config\r\n            ) %}\r\n            {% if not (needs_granting or needs_revoking) %}\r\n                {{\r\n                    log(\r\n                        \"On \"\r\n                        ~ relation.render()\r\n                        ~ \": All grants are in place, no revocation or granting needed.\"\r\n                    )\r\n                }}\r\n            {% endif %}\r\n        {% else %}\r\n            {#- - We don't think there's any chance of previous grants having carried over. --#}\r\n            {#- - Jump straight to granting what the user has configured. --#}\r\n            {% set needs_revoking = {} %} {% set needs_granting = grant_config %}\r\n        {% endif %}\r\n        {% if needs_granting or needs_revoking %}\r\n            {% set revoke_statement_list = get_dcl_statement_list(\r\n                relation, needs_revoking, get_revoke_sql\r\n            ) %}\r\n            {% set grant_statement_list = get_dcl_statement_list(\r\n                relation, needs_granting, get_grant_sql\r\n            ) %}\r\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\r\n            {% if dcl_statement_list %}\r\n                {{ call_dcl_statements(dcl_statement_list) }}\r\n            {% endif %}\r\n        {% endif %}\r\n    {% endif %}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.459244, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4602447, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4602447, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4612439, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4612439, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4622445, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4622445, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4642458, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4642458, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4652462, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4652462, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4662437, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4672506, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4672506, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.469249, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\r\n    {{\r\n        return(\r\n            adapter.dispatch(\"collect_freshness\", \"dbt\")(\r\n                source, loaded_at_field, filter\r\n            )\r\n        )\r\n    }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.469249, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\r\n    {% call statement(\"collect_freshness\", fetch_result=True, auto_begin=False) -%}\r\n        select\r\n            max({{ loaded_at_field }}) as max_loaded_at,\r\n            {{ current_timestamp() }} as snapshotted_at\r\n        from {{ source }}\r\n        {% if filter %} where {{ filter }} {% endif %}\r\n    {% endcall %}\r\n    {{ return(load_result(\"collect_freshness\")) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4702487, "supported_languages": null}, "macro.dbt.collect_freshness_custom_sql": {"name": "collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.collect_freshness_custom_sql", "macro_sql": "{% macro collect_freshness_custom_sql(source, loaded_at_query) %}\r\n    {{\r\n        return(\r\n            adapter.dispatch(\"collect_freshness_custom_sql\", \"dbt\")(\r\n                source, loaded_at_query\r\n            )\r\n        )\r\n    }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness_custom_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4702487, "supported_languages": null}, "macro.dbt.default__collect_freshness_custom_sql": {"name": "default__collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.default__collect_freshness_custom_sql", "macro_sql": "{% macro default__collect_freshness_custom_sql(source, loaded_at_query) %}\r\n    {% call statement(\r\n        \"collect_freshness_custom_sql\", fetch_result=True, auto_begin=False\r\n    ) -%}\r\n        with source_query as ({{ loaded_at_query }})\r\n        select\r\n            (select * from source_query) as max_loaded_at,\r\n            {{ current_timestamp() }} as snapshotted_at\r\n    {% endcall %}\r\n    {{ return(load_result(\"collect_freshness_custom_sql\")) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4712489, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\r\n    {{ return(adapter.dispatch(\"get_create_index_sql\", \"dbt\")(relation, index_dict)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4722483, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\r\n    {% do return(None) %}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4722483, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\r\n    {{ adapter.dispatch(\"create_indexes\", \"dbt\")(relation) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4722483, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\r\n    {%- set _indexes = config.get(\"indexes\", default=[]) -%}\r\n\r\n    {% for _index_dict in _indexes %}\r\n        {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\r\n        {% if create_index_sql %} {% do run_query(create_index_sql) %} {% endif %}\r\n    {% endfor %}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4742508, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\r\n    {{ adapter.dispatch(\"get_drop_index_sql\", \"dbt\")(relation, index_name) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4742508, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\r\n    {{\r\n        exceptions.raise_compiler_error(\r\n            \"`get_drop_index_sql has not been implemented for this adapter.\"\r\n        )\r\n    }}\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4742508, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\r\n    {{ adapter.dispatch(\"get_show_indexes_sql\", \"dbt\")(relation) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4752488, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\r\n    {{\r\n        exceptions.raise_compiler_error(\r\n            \"`get_show_indexes_sql has not been implemented for this adapter.\"\r\n        )\r\n    }}\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4752488, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\r\n    {{\r\n        return(\r\n            adapter.dispatch(\"get_catalog_relations\", \"dbt\")(\r\n                information_schema, relations\r\n            )\r\n        )\r\n    }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4762502, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\r\n    {% set typename = adapter.type() %}\r\n    {% set msg -%}\r\n    get_catalog_relations not implemented for {{ typename }}\r\n    {%- endset %}\r\n\r\n    {{ exceptions.raise_compiler_error(msg) }}\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4772496, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\r\n    {{ return(adapter.dispatch(\"get_catalog\", \"dbt\")(information_schema, schemas)) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4772496, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\r\n\r\n    {% set typename = adapter.type() %}\r\n    {% set msg -%}\r\n    get_catalog not implemented for {{ typename }}\r\n    {%- endset %}\r\n\r\n    {{ exceptions.raise_compiler_error(msg) }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4782484, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\r\n    {{ return(adapter.dispatch(\"information_schema_name\", \"dbt\")(database)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4782484, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\r\n    {%- if database -%} {{ database }}.information_schema\r\n    {%- else -%} information_schema\r\n    {%- endif -%}\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4782484, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\r\n    {{ return(adapter.dispatch(\"list_schemas\", \"dbt\")(database)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4782484, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\r\n    {% set sql %}\r\n    select distinct schema_name\r\n    from {{ information_schema_name(database) }}.SCHEMATA\r\n    where catalog_name ilike '{{ database }}'\r\n    {% endset %}\r\n    {{ return(run_query(sql)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4792483, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\r\n    {{\r\n        return(\r\n            adapter.dispatch(\"check_schema_exists\", \"dbt\")(information_schema, schema)\r\n        )\r\n    }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4792483, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\r\n    {% set sql -%}\r\n        select count(*)\r\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\r\n        where catalog_name='{{ information_schema.database }}'\r\n          and schema_name='{{ schema }}'\r\n    {%- endset %}\r\n    {{ return(run_query(sql)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4802482, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\r\n    {{\r\n        return(\r\n            adapter.dispatch(\"list_relations_without_caching\", \"dbt\")(schema_relation)\r\n        )\r\n    }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4802482, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\r\n    {{\r\n        exceptions.raise_not_implemented(\r\n            \"list_relations_without_caching macro not implemented for adapter \"\r\n            + adapter.type()\r\n        )\r\n    }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4802482, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\r\n    {{ return(adapter.dispatch(\"get_catalog_for_single_relation\", \"dbt\")(relation)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4802482, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\r\n    {{\r\n        exceptions.raise_not_implemented(\r\n            \"get_catalog_for_single_relation macro not implemented for adapter \"\r\n            + adapter.type()\r\n        )\r\n    }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4812481, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\r\n    {{ return(adapter.dispatch(\"get_relations\", \"dbt\")()) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4817526, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\r\n    {{\r\n        exceptions.raise_not_implemented(\r\n            \"get_relations macro not implemented for adapter \" + adapter.type()\r\n        )\r\n    }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4817526, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\r\n    {{\r\n        return(\r\n            adapter.dispatch(\"get_relation_last_modified\", \"dbt\")(\r\n                information_schema, relations\r\n            )\r\n        )\r\n    }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4817526, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\r\n    {{\r\n        exceptions.raise_not_implemented(\r\n            \"get_relation_last_modified macro not implemented for adapter \"\r\n            + adapter.type()\r\n        )\r\n    }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4817526, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\r\n    {{\r\n        return(\r\n            adapter.dispatch(\"alter_column_comment\", \"dbt\")(relation, column_dict)\r\n        )\r\n    }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4827578, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\r\n    {{\r\n        exceptions.raise_not_implemented(\r\n            \"alter_column_comment macro not implemented for adapter \" + adapter.type()\r\n        )\r\n    }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4827578, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\r\n    {{\r\n        return(\r\n            adapter.dispatch(\"alter_relation_comment\", \"dbt\")(\r\n                relation, relation_comment\r\n            )\r\n        )\r\n    }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4837575, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\r\n    {{\r\n        exceptions.raise_not_implemented(\r\n            \"alter_relation_comment macro not implemented for adapter \"\r\n            + adapter.type()\r\n        )\r\n    }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4837575, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\r\n    {{\r\n        return(\r\n            adapter.dispatch(\"persist_docs\", \"dbt\")(\r\n                relation, model, for_relation, for_columns\r\n            )\r\n        )\r\n    }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4837575, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\r\n    {% if for_relation and config.persist_relation_docs() and model.description %}\r\n        {% do run_query(alter_relation_comment(relation, model.description)) %}\r\n    {% endif %}\r\n\r\n    {% if for_columns and config.persist_column_docs() and model.columns %}\r\n        {% do run_query(alter_column_comment(relation, model.columns)) %}\r\n    {% endif %}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4847577, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix=\"__dbt_tmp\") %}\r\n    {{\r\n        return(\r\n            adapter.dispatch(\"make_intermediate_relation\", \"dbt\")(\r\n                base_relation, suffix\r\n            )\r\n        )\r\n    }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.485758, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\r\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4867575, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix=\"__dbt_tmp\") %}\r\n    {#- - This ensures microbatch batches get unique temp relations to avoid clobbering --#}\r\n    {% if suffix == \"__dbt_tmp\" and model.batch %}\r\n        {% set suffix = suffix ~ \"_\" ~ model.batch.id %}\r\n    {% endif %}\r\n\r\n    {{ return(adapter.dispatch(\"make_temp_relation\", \"dbt\")(base_relation, suffix)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4867575, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\r\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\r\n    {%- set temp_relation = base_relation.incorporate(\r\n        path={\"identifier\": temp_identifier}\r\n    ) -%}\r\n\r\n    {{ return(temp_relation) }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4877572, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(\r\n    base_relation, backup_relation_type, suffix=\"__dbt_backup\"\r\n) %}\r\n    {{\r\n        return(\r\n            adapter.dispatch(\"make_backup_relation\", \"dbt\")(\r\n                base_relation, backup_relation_type, suffix\r\n            )\r\n        )\r\n    }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4877572, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\r\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\r\n    {%- set backup_relation = base_relation.incorporate(\r\n        path={\"identifier\": backup_identifier}, type=backup_relation_type\r\n    ) -%}\r\n    {{ return(backup_relation) }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.488759, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\r\n    {{ return(adapter.dispatch(\"truncate_relation\", \"dbt\")(relation)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4897587, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\r\n    {% call statement(\"truncate_relation\") -%}\r\n    truncate table {{ relation.render() }}\r\n    {%- endcall %}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4897587, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\r\n    {{\r\n        return(\r\n            adapter.dispatch(\"get_or_create_relation\", \"dbt\")(\r\n                database, schema, identifier, type\r\n            )\r\n        )\r\n    }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4907587, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\r\n    {%- set target_relation = adapter.get_relation(\r\n        database=database, schema=schema, identifier=identifier\r\n    ) %}\r\n\r\n    {% if target_relation %} {% do return([true, target_relation]) %} {% endif %}\r\n\r\n    {%- set new_relation = api.Relation.create(\r\n        database=database, schema=schema, identifier=identifier, type=type\r\n    ) -%}\r\n    {% do return([false, new_relation]) %}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.491761, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\r\n    {% do return(\r\n        adapter.get_relation(\r\n            database=relation.database,\r\n            schema=relation.schema,\r\n            identifier=relation.identifier,\r\n        )\r\n    ) -%}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.491761, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\r\n    {{ return(load_cached_relation(relation)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.491761, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\r\n    {{ adapter.dispatch(\"create_schema\", \"dbt\")(relation) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4927595, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\r\n    {%- call statement(\"create_schema\") -%}\r\n    create schema if not exists {{ relation.without_identifier() }}\r\n    {% endcall %}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4927595, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\r\n    {{ adapter.dispatch(\"drop_schema\", \"dbt\")(relation) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4937572, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\r\n    {%- call statement(\"drop_schema\") -%}\r\n    drop schema if exists {{ relation.without_identifier() }} cascade\r\n    {% endcall %}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4937572, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\show.sql", "original_file_path": "macros\\adapters\\show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\r\n    {%- if sql_header is not none -%} {{ sql_header }} {%- endif %}\r\n    {{ get_limit_subquery_sql(compiled_code, limit) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4937572, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\show.sql", "original_file_path": "macros\\adapters\\show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "\r\n{%- macro get_limit_subquery_sql(sql, limit) -%}\r\n    {{ adapter.dispatch(\"get_limit_sql\", \"dbt\")(sql, limit) }}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbt.default__get_limit_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4947574, "supported_languages": null}, "macro.dbt.default__get_limit_sql": {"name": "default__get_limit_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\show.sql", "original_file_path": "macros\\adapters\\show.sql", "unique_id": "macro.dbt.default__get_limit_sql", "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\r\n    {{ sql }} {% if limit is not none %} limit {{ limit }} {%- endif -%}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4947574, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\r\n    {{ adapter.dispatch(\"current_timestamp\", \"dbt\")() }}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4957576, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\r\n    {{\r\n        exceptions.raise_not_implemented(\r\n            \"current_timestamp macro not implemented for adapter \" + adapter.type()\r\n        )\r\n    }}\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4957576, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\r\n\r\n{%- macro snapshot_get_time() -%}\r\n    {{ adapter.dispatch(\"snapshot_get_time\", \"dbt\")() }}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4967608, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %} {{ current_timestamp() }} {% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4967608, "supported_languages": null}, "macro.dbt.get_snapshot_get_time_data_type": {"name": "get_snapshot_get_time_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.get_snapshot_get_time_data_type", "macro_sql": "{% macro get_snapshot_get_time_data_type() %}\r\n    {% set snapshot_time = adapter.dispatch(\"snapshot_get_time\", \"dbt\")() %}\r\n    {% set time_data_type_sql = \"select \" ~ snapshot_time ~ \" as dbt_snapshot_time\" %}\r\n    {% set snapshot_time_column_schema = get_column_schema_from_query(\r\n        time_data_type_sql\r\n    ) %}\r\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\r\n    {{ return(time_data_type or none) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt_postgres.postgres__snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4977603, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\r\n    {{ return(adapter.dispatch(\"current_timestamp_backcompat\", \"dbt\")()) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4987605, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\r\n    current_timestamp::timestamp\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4987605, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\r\n    {{ return(adapter.dispatch(\"current_timestamp_in_utc_backcompat\", \"dbt\")()) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4987605, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\r\n    {{ return(adapter.dispatch(\"current_timestamp_backcompat\", \"dbt\")()) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4997582, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\validate_sql.sql", "original_file_path": "macros\\adapters\\validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\r\n    {{ return(adapter.dispatch(\"validate_sql\", \"dbt\")(sql)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4997582, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\validate_sql.sql", "original_file_path": "macros\\adapters\\validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\r\n    {% call statement(\"validate_sql\") -%} explain {{ sql }} {% endcall %}\r\n    {{ return(load_result(\"validate_sql\")) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.4997582, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\r\n\r\n    {% set error_msg -%}\r\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\r\n    {%- endset %}\r\n\r\n    {% set res = try_or_compiler_error(\r\n        error_msg,\r\n        modules.datetime.datetime.strptime,\r\n        date_str.strip(),\r\n        date_fmt,\r\n    ) %}\r\n    {{ return(res) }}\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.500758, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(\r\n    start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\"\r\n) %}\r\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\r\n\r\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\r\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\r\n\r\n    {% set day_count = (end_date - start_date).days %}\r\n    {% if day_count < 0 %}\r\n        {% set msg -%}\r\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\r\n        {%- endset %}\r\n\r\n        {{ exceptions.raise_compiler_error(msg, model) }}\r\n    {% endif %}\r\n\r\n    {% set date_list = [] %}\r\n    {% for i in range(0, day_count + 1) %}\r\n        {% set the_date = modules.datetime.timedelta(days=i) + start_date %}\r\n        {% if not out_fmt %} {% set _ = date_list.append(the_date) %}\r\n        {% else %} {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\r\n        {% endif %}\r\n    {% endfor %}\r\n\r\n    {{ return(date_list) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.502758, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt=\"%Y%m%d\") %}\r\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\r\n\r\n    {% if (partition_range | length) == 1 %}\r\n        {% set start_date = partition_range[0] %}\r\n        {% set end_date = none %}\r\n        {% elif (partition_range | length) == 2 %}\r\n        {% set start_date = partition_range[0] %}\r\n        {% set end_date = partition_range[1] %}\r\n    {% else %}\r\n        {{\r\n            exceptions.raise_compiler_error(\r\n                \"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \"\r\n                ~ raw_partition_date\r\n            )\r\n        }}\r\n    {% endif %}\r\n\r\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5037577, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\r\n    {% set dt = modules.datetime.datetime.now() %}\r\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5047581, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\r\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language=\"sql\") -%}\r\n    {%- if execute: -%}\r\n        {%- set compiled_code = caller() -%}\r\n\r\n        {%- if name == \"main\" -%}\r\n            {{\r\n                log(\r\n                    'Writing runtime {} for node \"{}\"'.format(\r\n                        language, model[\"unique_id\"]\r\n                    )\r\n                )\r\n            }}\r\n            {{ write(compiled_code) }}\r\n        {%- endif -%}\r\n        {%- if language == \"sql\" -%}\r\n            {%- set res, table = adapter.execute(\r\n                compiled_code, auto_begin=auto_begin, fetch=fetch_result\r\n            ) -%}\r\n        {%- elif language == \"python\" -%}\r\n            {%- set res = submit_python_job(model, compiled_code) -%}\r\n            {#- - TODO: What should table be for python models? --#}\r\n            {%- set table = None -%}\r\n        {%- else -%}\r\n            {% do exceptions.raise_compiler_error(\r\n                \"statement macro didn't get supported language\"\r\n            ) %}\r\n        {%- endif -%}\r\n\r\n        {%- if name is not none -%}\r\n            {{ store_result(name, response=res, agate_table=table) }}\r\n        {%- endif -%}\r\n\r\n    {%- endif -%}\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5067642, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(\r\n    name=None, message=None, code=None, rows_affected=None, res=None\r\n) -%}\r\n    {%- set sql = caller() -%}\r\n\r\n    {%- if name == \"main\" -%}\r\n        {{ log('Writing runtime SQL for node \"{}\"'.format(model[\"unique_id\"])) }}\r\n        {{ write(sql) }}\r\n    {%- endif -%}\r\n\r\n    {%- if name is not none -%}\r\n        {{\r\n            store_raw_result(\r\n                name,\r\n                message=message,\r\n                code=code,\r\n                rows_affected=rows_affected,\r\n                agate_table=res,\r\n            )\r\n        }}\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.508758, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\r\n    {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\r\n        {{ sql }}\r\n    {% endcall %}\r\n\r\n    {% do return(load_result(\"run_query_statement\").table) %}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.508758, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\accepted_values.sql", "original_file_path": "macros\\generic_test_sql\\accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\r\n\r\n    with\r\n        all_values as (\r\n\r\n            select {{ column_name }} as value_field, count(*) as n_records\r\n\r\n            from {{ model }}\r\n            group by {{ column_name }}\r\n\r\n        )\r\n\r\n    select *\r\n    from all_values\r\n    where\r\n        value_field not in (\r\n            {% for value in values -%}\r\n                {% if quote -%}'{{ value }}'\r\n                {%- else -%}{{ value }}\r\n                {%- endif -%}\r\n                {%- if not loop.last -%},{%- endif %}\r\n            {%- endfor %}\r\n        )\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5097578, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\not_null.sql", "original_file_path": "macros\\generic_test_sql\\not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\r\n\r\n    {% set column_list = \"*\" if should_store_failures() else column_name %}\r\n\r\n    select {{ column_list }}\r\n    from {{ model }}\r\n    where {{ column_name }} is null\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5107582, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\relationships.sql", "original_file_path": "macros\\generic_test_sql\\relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\r\n\r\n    with\r\n        child as (\r\n            select {{ column_name }} as from_field\r\n            from {{ model }}\r\n            where {{ column_name }} is not null\r\n        ),\r\n\r\n        parent as (select {{ field }} as to_field from {{ to }})\r\n\r\n    select from_field\r\n\r\n    from child\r\n    left join parent on child.from_field = parent.to_field\r\n\r\n    where parent.to_field is null\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5107582, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\unique.sql", "original_file_path": "macros\\generic_test_sql\\unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\r\n\r\n    select {{ column_name }} as unique_field, count(*) as n_records\r\n\r\n    from {{ model }}\r\n    where {{ column_name }} is not null\r\n    group by {{ column_name }}\r\n    having count(*) > 1\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5107582, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\r\n    {% do return(\r\n        adapter.dispatch(\"generate_alias_name\", \"dbt\")(custom_alias_name, node)\r\n    ) %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5117579, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\r\n\r\n    {%- if custom_alias_name -%} {{ custom_alias_name | trim }}\r\n\r\n    {%- elif node.version -%}\r\n\r\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\r\n\r\n    {%- else -%} {{ node.name }}\r\n\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5127578, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\r\n    {% do return(\r\n        adapter.dispatch(\"generate_database_name\", \"dbt\")(\r\n            custom_database_name, node\r\n        )\r\n    ) %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5127578, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\r\n    {%- set default_database = target.database -%}\r\n    {%- if custom_database_name is none -%} {{ default_database }}\r\n\r\n    {%- else -%} {{ custom_database_name }}\r\n\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5127578, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\r\n    {{\r\n        return(\r\n            adapter.dispatch(\"generate_schema_name\", \"dbt\")(custom_schema_name, node)\r\n        )\r\n    }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5137582, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\r\n\r\n    {%- set default_schema = target.schema -%}\r\n    {%- if custom_schema_name is none -%} {{ default_schema }}\r\n\r\n    {%- else -%} {{ default_schema }}_{{ custom_schema_name | trim }}\r\n\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5147715, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\r\n\r\n    {%- set default_schema = target.schema -%}\r\n    {%- if target.name == \"prod\" and custom_schema_name is not none -%}\r\n\r\n        {{ custom_schema_name | trim }}\r\n\r\n    {%- else -%} {{ default_schema }}\r\n\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5157578, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\r\n    {{ config.set(\"sql_header\", caller()) }}\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5157578, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\r\n    {% set config_full_refresh = config.get(\"full_refresh\") %}\r\n    {% if config_full_refresh is none %}\r\n        {% set config_full_refresh = flags.FULL_REFRESH %}\r\n    {% endif %}\r\n    {% do return(config_full_refresh) %}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5167623, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\r\n    {% set config_store_failures = config.get(\"store_failures\") %}\r\n    {% if config_store_failures is none %}\r\n        {% set config_store_failures = flags.STORE_FAILURES %}\r\n    {% endif %}\r\n    {% do return(config_store_failures) %}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5177605, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\r\n    {% for hook in hooks | selectattr(\"transaction\", \"equalto\", inside_transaction) %}\r\n        {% if not inside_transaction and loop.first %}\r\n            {% call statement(auto_begin=inside_transaction) %}\r\n                commit\r\n                ;\r\n            {% endcall %}\r\n        {% endif %}\r\n        {% set rendered = render(hook.get(\"sql\")) | trim %}\r\n        {% if (rendered | length) > 0 %}\r\n            {% call statement(auto_begin=inside_transaction) %}\r\n                {{ rendered }}\r\n            {% endcall %}\r\n        {% endif %}\r\n    {% endfor %}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.51876, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\r\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5197582, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\r\n    {{ make_hook_config(sql, inside_transaction=False) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5197582, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\r\n    {{ make_hook_config(sql, inside_transaction=True) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5197582, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\r\n    {{ make_hook_config(sql, inside_transaction=False) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5207894, "supported_languages": null}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\r\n    {% set existing_relation = load_cached_relation(this) %}\r\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\r\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\r\n    {% set backup_relation_type = (\r\n        target_relation.MaterializedView\r\n        if existing_relation is none\r\n        else existing_relation.type\r\n    ) %}\r\n    {% set backup_relation = make_backup_relation(\r\n        target_relation, backup_relation_type\r\n    ) %}\r\n\r\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\r\n\r\n    {% set build_sql = materialized_view_get_build_sql(\r\n        existing_relation,\r\n        target_relation,\r\n        backup_relation,\r\n        intermediate_relation,\r\n    ) %}\r\n\r\n    {% if build_sql == \"\" %} {{ materialized_view_execute_no_op(target_relation) }}\r\n    {% else %}\r\n        {{\r\n            materialized_view_execute_build_sql(\r\n                build_sql, existing_relation, target_relation, post_hooks\r\n            )\r\n        }}\r\n    {% endif %}\r\n\r\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\r\n\r\n    {{ return({\"relations\": [target_relation]}) }}\r\n\r\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5227914, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\r\n\r\n    -- backup_relation and intermediate_relation should not already exist in the\r\n    -- database\r\n    -- it's possible these exist because of a previous run that exited unexpectedly\r\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\r\n    {% set preexisting_intermediate_relation = load_cached_relation(\r\n        intermediate_relation\r\n    ) %}\r\n\r\n    -- drop the temp relations if they exist already in the database\r\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\r\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\r\n\r\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5237887, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(\r\n    backup_relation, intermediate_relation, post_hooks\r\n) %}\r\n\r\n    -- drop the temp relations if they exist to leave the database clean for the next\r\n    -- run\r\n    {{ drop_relation_if_exists(backup_relation) }}\r\n    {{ drop_relation_if_exists(intermediate_relation) }}\r\n\r\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5237887, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(\r\n    existing_relation,\r\n    target_relation,\r\n    backup_relation,\r\n    intermediate_relation\r\n) %}\r\n\r\n    {% set full_refresh_mode = should_full_refresh() %}\r\n\r\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\r\n    {% if existing_relation is none %}\r\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\r\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\r\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\r\n    {% else %}\r\n\r\n        -- get config options\r\n        {% set on_configuration_change = config.get(\"on_configuration_change\") %}\r\n        {% set configuration_changes = get_materialized_view_configuration_changes(\r\n            existing_relation, config\r\n        ) %}\r\n\r\n        {% if configuration_changes is none %}\r\n            {% set build_sql = refresh_materialized_view(target_relation) %}\r\n\r\n        {% elif on_configuration_change == \"apply\" %}\r\n            {% set build_sql = get_alter_materialized_view_as_sql(\r\n                target_relation,\r\n                configuration_changes,\r\n                sql,\r\n                existing_relation,\r\n                backup_relation,\r\n                intermediate_relation,\r\n            ) %}\r\n        {% elif on_configuration_change == \"continue\" %}\r\n            {% set build_sql = \"\" %}\r\n            {{\r\n                exceptions.warn(\r\n                    \"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\"\r\n                    ~ target_relation.render()\r\n                    ~ \"`\"\r\n                )\r\n            }}\r\n        {% elif on_configuration_change == \"fail\" %}\r\n            {{\r\n                exceptions.raise_fail_fast_error(\r\n                    \"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\"\r\n                    ~ target_relation.render()\r\n                    ~ \"`\"\r\n                )\r\n            }}\r\n\r\n        {% else %}\r\n            -- this only happens if the user provides a value other than `apply`,\r\n            -- 'skip', 'fail'\r\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\r\n\r\n        {% endif %}\r\n\r\n    {% endif %}\r\n\r\n    {% do return(build_sql) %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5257618, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\r\n    {% do store_raw_result(\r\n        name=\"main\",\r\n        message=\"skip \" ~ target_relation,\r\n        code=\"skip\",\r\n        rows_affected=\"-1\",\r\n    ) %}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5267599, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(\r\n    build_sql, existing_relation, target_relation, post_hooks\r\n) %}\r\n\r\n    -- `BEGIN` happens here:\r\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n\r\n    {% set grant_config = config.get(\"grants\") %}\r\n\r\n    {% call statement(name=\"main\") %} {{ build_sql }} {% endcall %}\r\n\r\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\r\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\r\n\r\n    {% do persist_docs(target_relation, model) %}\r\n\r\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n\r\n    {{ adapter.commit() }}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5277598, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table.sql", "original_file_path": "macros\\materializations\\models\\table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\r\n\r\n    {%- set existing_relation = load_cached_relation(this) -%}\r\n    {%- set target_relation = this.incorporate(type=\"table\") %}\r\n    {%- set intermediate_relation = make_intermediate_relation(target_relation) -%}\r\n    -- the intermediate_relation should not already exist in the database; get_relation\r\n    -- will return None in that case. Otherwise, we get a relation that we can drop\r\n    -- later, before we try to use this name for the current operation\r\n    {%- set preexisting_intermediate_relation = load_cached_relation(\r\n        intermediate_relation\r\n    ) -%}\r\n    /*\r\n      See ../view/view.sql for more information about this relation.\r\n  */\r\n    {%- set backup_relation_type = (\r\n        \"table\" if existing_relation is none else existing_relation.type\r\n    ) -%}\r\n    {%- set backup_relation = make_backup_relation(\r\n        target_relation, backup_relation_type\r\n    ) -%}\r\n    -- as above, the backup_relation should not already exist\r\n    {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\r\n    -- grab current tables grants config for comparision later on\r\n    {% set grant_config = config.get(\"grants\") %}\r\n\r\n    -- drop the temp relations if they exist already in the database\r\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\r\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\r\n\r\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n\r\n    -- `BEGIN` happens here:\r\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n\r\n    -- build model\r\n    {% call statement(\"main\") -%}\r\n        {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\r\n    {%- endcall %}\r\n\r\n    -- cleanup\r\n    {% if existing_relation is not none %}\r\n        /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\r\n        since the variable was first set. */\r\n        {% set existing_relation = load_cached_relation(existing_relation) %}\r\n        {% if existing_relation is not none %}\r\n            {{ adapter.rename_relation(existing_relation, backup_relation) }}\r\n        {% endif %}\r\n    {% endif %}\r\n\r\n    {{ adapter.rename_relation(intermediate_relation, target_relation) }}\r\n\r\n    {% do create_indexes(target_relation) %}\r\n\r\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n\r\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\r\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\r\n\r\n    {% do persist_docs(target_relation, model) %}\r\n\r\n    -- `COMMIT` happens here\r\n    {{ adapter.commit() }}\r\n\r\n    -- finally, drop the existing/backup relation after the commit\r\n    {{ drop_relation_if_exists(backup_relation) }}\r\n\r\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n\r\n    {{ return({\"relations\": [target_relation]}) }}\r\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.53179, "supported_languages": ["sql"]}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view.sql", "original_file_path": "macros\\materializations\\models\\view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\r\n\r\n    {%- set existing_relation = load_cached_relation(this) -%}\r\n    {%- set target_relation = this.incorporate(type=\"view\") -%}\r\n    {%- set intermediate_relation = make_intermediate_relation(target_relation) -%}\r\n\r\n    -- the intermediate_relation should not already exist in the database; get_relation\r\n    -- will return None in that case. Otherwise, we get a relation that we can drop\r\n    -- later, before we try to use this name for the current operation\r\n    {%- set preexisting_intermediate_relation = load_cached_relation(\r\n        intermediate_relation\r\n    ) -%}\r\n    /*\r\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\r\n     a previous run, and we're going to try to drop it immediately. At the end of this\r\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\r\n     and then we're going to drop it. In order to make sure we run the correct one of:\r\n       - drop view ...\r\n       - drop table ...\r\n\r\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\r\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\r\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\r\n     this relation will be effectively unused.\r\n  */\r\n    {%- set backup_relation_type = (\r\n        \"view\" if existing_relation is none else existing_relation.type\r\n    ) -%}\r\n    {%- set backup_relation = make_backup_relation(\r\n        target_relation, backup_relation_type\r\n    ) -%}\r\n    -- as above, the backup_relation should not already exist\r\n    {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\r\n    -- grab current tables grants config for comparision later on\r\n    {% set grant_config = config.get(\"grants\") %}\r\n\r\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n\r\n    -- drop the temp relations if they exist already in the database\r\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\r\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\r\n\r\n    -- `BEGIN` happens here:\r\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n\r\n    -- build model\r\n    {% call statement(\"main\") -%}\r\n        {{ get_create_view_as_sql(intermediate_relation, sql) }}\r\n    {%- endcall %}\r\n\r\n    -- cleanup\r\n    -- move the existing view out of the way\r\n    {% if existing_relation is not none %}\r\n        /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\r\n        since the variable was first set. */\r\n        {% set existing_relation = load_cached_relation(existing_relation) %}\r\n        {% if existing_relation is not none %}\r\n            {{ adapter.rename_relation(existing_relation, backup_relation) }}\r\n        {% endif %}\r\n    {% endif %}\r\n    {{ adapter.rename_relation(intermediate_relation, target_relation) }}\r\n\r\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\r\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\r\n\r\n    {% do persist_docs(target_relation, model) %}\r\n\r\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n\r\n    {{ adapter.commit() }}\r\n\r\n    {{ drop_relation_if_exists(backup_relation) }}\r\n\r\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n\r\n    {{ return({\"relations\": [target_relation]}) }}\r\n\r\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5347898, "supported_languages": ["sql"]}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "original_file_path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\r\n    {{ return(adapter.dispatch(\"can_clone_table\", \"dbt\")()) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5357597, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "original_file_path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %} {{ return(False) }} {% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5357597, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\clone.sql", "original_file_path": "macros\\materializations\\models\\clone\\clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\r\n\r\n    {%- set relations = {\"relations\": []} -%}\r\n\r\n    {%- if not defer_relation -%}\r\n        -- nothing to do\r\n        {{\r\n            log(\r\n                \"No relation found in state manifest for \" ~ model.unique_id,\r\n                info=True,\r\n            )\r\n        }}\r\n        {{ return(relations) }}\r\n    {%- endif -%}\r\n\r\n    {%- set existing_relation = load_cached_relation(this) -%}\r\n\r\n    {%- if existing_relation and not flags.FULL_REFRESH -%}\r\n        -- noop!\r\n        {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\r\n        {{ return(relations) }}\r\n    {%- endif -%}\r\n\r\n    {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\r\n\r\n    -- If this is a database that can do zero-copy cloning of tables, and the other\r\n    -- relation is a table, then this will be a table\r\n    -- Otherwise, this will be a view\r\n    {% set can_clone_table = can_clone_table() %}\r\n\r\n    {%- if other_existing_relation and other_existing_relation.type == \"table\" and can_clone_table -%}\r\n\r\n        {%- set target_relation = this.incorporate(type=\"table\") -%}\r\n        {% if existing_relation is not none and not existing_relation.is_table %}\r\n            {{\r\n                log(\r\n                    \"Dropping relation \"\r\n                    ~ existing_relation.render()\r\n                    ~ \" because it is of type \"\r\n                    ~ existing_relation.type\r\n                )\r\n            }}\r\n            {{ drop_relation_if_exists(existing_relation) }}\r\n        {% endif %}\r\n\r\n        -- as a general rule, data platforms that can clone tables can also do atomic\r\n        -- 'create or replace'\r\n        {% call statement(\"main\") %}\r\n            {% if target_relation and defer_relation and target_relation == defer_relation %}\r\n                {{\r\n                    log(\r\n                        \"Target relation and defer relation are the same, skipping clone for relation: \"\r\n                        ~ target_relation.render()\r\n                    )\r\n                }}\r\n            {% else %} {{ create_or_replace_clone(target_relation, defer_relation) }}\r\n            {% endif %}\r\n\r\n        {% endcall %}\r\n\r\n        {% set should_revoke = should_revoke(\r\n            existing_relation, full_refresh_mode=True\r\n        ) %}\r\n        {% do apply_grants(\r\n            target_relation, grant_config, should_revoke=should_revoke\r\n        ) %}\r\n        {% do persist_docs(target_relation, model) %}\r\n\r\n        {{ return({\"relations\": [target_relation]}) }}\r\n\r\n    {%- else -%}\r\n\r\n        {%- set target_relation = this.incorporate(type=\"view\") -%}\r\n\r\n        -- reuse the view materialization\r\n        -- TODO: support actual dispatch for materialization macros\r\n        -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\r\n        {% set search_name = \"materialization_view_\" ~ adapter.type() %}\r\n        {% if not search_name in context %}\r\n            {% set search_name = \"materialization_view_default\" %}\r\n        {% endif %}\r\n        {% set materialization_macro = context[search_name] %}\r\n        {% set relations = materialization_macro() %}\r\n        {{ return(relations) }}\r\n\r\n    {%- endif -%}\r\n\r\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5397847, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "original_file_path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\r\n    {{\r\n        return(\r\n            adapter.dispatch(\"create_or_replace_clone\", \"dbt\")(\r\n                this_relation, defer_relation\r\n            )\r\n        )\r\n    }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5407586, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "original_file_path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\r\n    create or replace table {{ this_relation.render() }}\r\n    clone {{ defer_relation.render() }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5407586, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\r\n\r\n    {% set quoted = [] %}\r\n    {% for col in column_names -%}\r\n        {%- do quoted.append(adapter.quote(col)) -%}\r\n    {%- endfor %}\r\n\r\n    {%- set dest_cols_csv = quoted | join(\", \") -%}\r\n    {{ return(dest_cols_csv) }}\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.54276, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\r\n\r\n    {% set result = [] %}\r\n    {% set source_names = source_columns | map(attribute=\"column\") | list %}\r\n    {% set target_names = target_columns | map(attribute=\"column\") | list %}\r\n\r\n    {# --check whether the name attribute exists in the target - this does not perform a data type check #}\r\n    {% for sc in source_columns %}\r\n        {% if sc.name not in target_names %} {{ result.append(sc) }} {% endif %}\r\n    {% endfor %}\r\n\r\n    {{ return(result) }}\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.54276, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\r\n\r\n    {% set result = [] %}\r\n    {% for sc in source_columns %}\r\n        {% set tc = (\r\n            target_columns\r\n            | selectattr(\"name\", \"equalto\", sc.name)\r\n            | list\r\n            | first\r\n        ) %}\r\n        {% if tc %}\r\n            {% if sc.data_type != tc.data_type and not sc.can_expand_to(\r\n                other_column=tc\r\n            ) %}\r\n                {{ result.append({\"column_name\": tc.name, \"new_type\": sc.data_type}) }}\r\n            {% endif %}\r\n        {% endif %}\r\n    {% endfor %}\r\n\r\n    {{ return(result) }}\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.54476, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(\r\n    merge_update_columns, merge_exclude_columns, dest_columns\r\n) %}\r\n    {{\r\n        return(\r\n            adapter.dispatch(\"get_merge_update_columns\", \"dbt\")(\r\n                merge_update_columns, merge_exclude_columns, dest_columns\r\n            )\r\n        )\r\n    }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.54476, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(\r\n    merge_update_columns, merge_exclude_columns, dest_columns\r\n) %}\r\n    {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\r\n\r\n    {%- if merge_update_columns and merge_exclude_columns -%}\r\n        {{\r\n            exceptions.raise_compiler_error(\r\n                \"Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config\"\r\n            )\r\n        }}\r\n    {%- elif merge_update_columns -%} {%- set update_columns = merge_update_columns -%}\r\n    {%- elif merge_exclude_columns -%}\r\n        {%- set update_columns = [] -%}\r\n        {%- for column in dest_columns -%}\r\n            {% if column.column | lower not in merge_exclude_columns | map(\r\n                \"lower\"\r\n            ) | list %}\r\n                {%- do update_columns.append(column.quoted) -%}\r\n            {% endif %}\r\n        {%- endfor -%}\r\n    {%- else -%} {%- set update_columns = default_cols -%}\r\n    {%- endif -%}\r\n\r\n    {{ return(update_columns) }}\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.54576, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\r\n\r\n    -- relations\r\n    {%- set existing_relation = load_cached_relation(this) -%}\r\n    {%- set target_relation = this.incorporate(type=\"table\") -%}\r\n    {%- set temp_relation = make_temp_relation(target_relation) -%}\r\n    {%- set intermediate_relation = make_intermediate_relation(target_relation) -%}\r\n    {%- set backup_relation_type = (\r\n        \"table\" if existing_relation is none else existing_relation.type\r\n    ) -%}\r\n    {%- set backup_relation = make_backup_relation(\r\n        target_relation, backup_relation_type\r\n    ) -%}\r\n\r\n    -- configs\r\n    {%- set unique_key = config.get(\"unique_key\") -%}\r\n    {%- set full_refresh_mode = should_full_refresh() or existing_relation.is_view -%}\r\n    {%- set on_schema_change = incremental_validate_on_schema_change(\r\n        config.get(\"on_schema_change\"), default=\"ignore\"\r\n    ) -%}\r\n\r\n    -- the temp_ and backup_ relations should not already exist in the database;\r\n    -- get_relation\r\n    -- will return None in that case. Otherwise, we get a relation that we can drop\r\n    -- later, before we try to use this name for the current operation. This has to\r\n    -- happen before\r\n    -- BEGIN, in a separate transaction\r\n    {%- set preexisting_intermediate_relation = load_cached_relation(\r\n        intermediate_relation\r\n    ) -%}\r\n    {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\r\n    -- grab current tables grants config for comparision later on\r\n    {% set grant_config = config.get(\"grants\") %}\r\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\r\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\r\n\r\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n\r\n    -- `BEGIN` happens here:\r\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n\r\n    {% set to_drop = [] %}\r\n\r\n    {% set incremental_strategy = config.get(\"incremental_strategy\") or \"default\" %}\r\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(\r\n        context, incremental_strategy\r\n    ) %}\r\n\r\n    {% if existing_relation is none %}\r\n        {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\r\n    {% elif full_refresh_mode %}\r\n        {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\r\n        {% set need_swap = true %}\r\n    {% else %}\r\n        {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\r\n        {% set contract_config = config.get(\"contract\") %}\r\n        {% if not contract_config or not contract_config.enforced %}\r\n            {% do adapter.expand_target_column_types(\r\n                from_relation=temp_relation, to_relation=target_relation\r\n            ) %}\r\n        {% endif %}\r\n        {#- - Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\r\n        {% set dest_columns = process_schema_changes(\r\n            on_schema_change, temp_relation, existing_relation\r\n        ) %}\r\n        {% if not dest_columns %}\r\n            {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\r\n        {% endif %}\r\n\r\n        {#- - Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\r\n        {% set incremental_predicates = config.get(\"predicates\", none) or config.get(\r\n            \"incremental_predicates\", none\r\n        ) %}\r\n        {% set strategy_arg_dict = {\r\n            \"target_relation\": target_relation,\r\n            \"temp_relation\": temp_relation,\r\n            \"unique_key\": unique_key,\r\n            \"dest_columns\": dest_columns,\r\n            \"incremental_predicates\": incremental_predicates,\r\n        } %}\r\n        {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\r\n\r\n    {% endif %}\r\n\r\n    {% call statement(\"main\") %} {{ build_sql }} {% endcall %}\r\n\r\n    {% if need_swap %}\r\n        {% do adapter.rename_relation(target_relation, backup_relation) %}\r\n        {% do adapter.rename_relation(intermediate_relation, target_relation) %}\r\n        {% do to_drop.append(backup_relation) %}\r\n    {% endif %}\r\n\r\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\r\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\r\n\r\n    {% do persist_docs(target_relation, model) %}\r\n\r\n    {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\r\n        {% do create_indexes(target_relation) %}\r\n    {% endif %}\r\n\r\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n\r\n    -- `COMMIT` happens here\r\n    {% do adapter.commit() %}\r\n\r\n    {% for rel in to_drop %} {% do adapter.drop_relation(rel) %} {% endfor %}\r\n\r\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n\r\n    {{ return({\"relations\": [target_relation]}) }}\r\n\r\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.552757, "supported_languages": ["sql"]}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\r\n    {#- - do not run introspective queries in parsing #}\r\n    {% if not execute %} {{ return(False) }}\r\n    {% else %}\r\n        {% set relation = adapter.get_relation(\r\n            this.database, this.schema, this.table\r\n        ) %}\r\n        {{\r\n            return(\r\n                relation is not none\r\n                and relation.type == \"table\"\r\n                and model.config.materialized == \"incremental\"\r\n                and not should_full_refresh()\r\n            )\r\n        }}\r\n    {% endif %}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5537567, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5547569, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set source_unique_key = (\"DBT_INTERNAL_SOURCE.\" ~ unique_key) | trim %}\n\t    {% set target_unique_key = (\"DBT_INTERNAL_DEST.\" ~ unique_key) | trim %}\n\t    {% set unique_key_match = equals(source_unique_key, target_unique_key) | trim %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5577762, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5577762, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is string %}\n        {% set unique_key = [unique_key] %}\n        {% endif %}\n\n        {%- set unique_key_str = unique_key|join(', ') -%}\n\n        delete from {{ target }}\n        where ({{ unique_key_str }}) in (\n            select distinct {{ unique_key_str }}\n            from {{ source }}\n        )\n        {%- if incremental_predicates %}\n            {% for predicate in incremental_predicates %}\n                and {{ predicate }}\n            {% endfor %}\n        {%- endif -%};\n\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.559761, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.559761, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5607617, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default=\"ignore\") %}\r\n\r\n    {% if on_schema_change not in [\r\n        \"sync_all_columns\",\r\n        \"append_new_columns\",\r\n        \"fail\",\r\n        \"ignore\",\r\n    ] %}\r\n\r\n        {% set log_message = (\r\n            \"Invalid value for on_schema_change (%s) specified. Setting default value of %s.\"\r\n            % (on_schema_change, default)\r\n        ) %}\r\n        {% do log(log_message) %}\r\n\r\n        {{ return(default) }}\r\n\r\n    {% else %} {{ return(on_schema_change) }}\r\n\r\n    {% endif %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5627928, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\r\n\r\n    {% set schema_changed = False %}\r\n\r\n    {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\r\n    {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\r\n    {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\r\n    {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\r\n\r\n    {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\r\n\r\n    {% if source_not_in_target != [] %} {% set schema_changed = True %}\r\n    {% elif target_not_in_source != [] or new_target_types != [] %}\r\n        {% set schema_changed = True %}\r\n    {% elif new_target_types != [] %} {% set schema_changed = True %}\r\n    {% endif %}\r\n\r\n    {% set changes_dict = {\r\n        \"schema_changed\": schema_changed,\r\n        \"source_not_in_target\": source_not_in_target,\r\n        \"target_not_in_source\": target_not_in_source,\r\n        \"source_columns\": source_columns,\r\n        \"target_columns\": target_columns,\r\n        \"new_target_types\": new_target_types,\r\n    } %}\r\n\r\n    {% set msg %}\r\n    In {{ target_relation }}:\r\n        Schema changed: {{ schema_changed }}\r\n        Source columns not in target: {{ source_not_in_target }}\r\n        Target columns not in source: {{ target_not_in_source }}\r\n        New column types: {{ new_target_types }}\r\n    {% endset %}\r\n\r\n    {% do log(msg) %}\r\n\r\n    {{ return(changes_dict) }}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5647626, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\r\n\r\n    {%- set add_to_target_arr = schema_changes_dict[\"source_not_in_target\"] -%}\r\n\r\n    {%- if on_schema_change == \"append_new_columns\" -%}\r\n        {%- if add_to_target_arr | length > 0 -%}\r\n            {%- do alter_relation_add_remove_columns(\r\n                target_relation, add_to_target_arr, none\r\n            ) -%}\r\n        {%- endif -%}\r\n\r\n    {% elif on_schema_change == \"sync_all_columns\" %}\r\n        {%- set remove_from_target_arr = schema_changes_dict[\"target_not_in_source\"] -%}\r\n        {%- set new_target_types = schema_changes_dict[\"new_target_types\"] -%}\r\n\r\n        {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\r\n            {%- do alter_relation_add_remove_columns(\r\n                target_relation, add_to_target_arr, remove_from_target_arr\r\n            ) -%}\r\n        {% endif %}\r\n\r\n        {% if new_target_types != [] %}\r\n            {% for ntt in new_target_types %}\r\n                {% set column_name = ntt[\"column_name\"] %}\r\n                {% set new_type = ntt[\"new_type\"] %}\r\n                {% do alter_column_type(target_relation, column_name, new_type) %}\r\n            {% endfor %}\r\n        {% endif %}\r\n\r\n    {% endif %}\r\n\r\n    {% set schema_change_message %}\r\n    In {{ target_relation }}:\r\n        Schema change approach: {{ on_schema_change }}\r\n        Columns added: {{ add_to_target_arr }}\r\n        Columns removed: {{ remove_from_target_arr }}\r\n        Data types changed: {{ new_target_types }}\r\n    {% endset %}\r\n\r\n    {% do log(schema_change_message) %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5667655, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\r\n\r\n    {% if on_schema_change == \"ignore\" %} {{ return({}) }}\r\n\r\n    {% else %}\r\n\r\n        {% set schema_changes_dict = check_for_schema_changes(\r\n            source_relation, target_relation\r\n        ) %}\r\n\r\n        {% if schema_changes_dict[\"schema_changed\"] %}\r\n\r\n            {% if on_schema_change == \"fail\" %}\r\n\r\n                {% set fail_msg %}\r\n              The source and target schemas on this incremental model are out of sync!\r\n              They can be reconciled in several ways:\r\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\r\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\r\n                - update the schema manually and re-run the process.\r\n\r\n              Additional troubleshooting context:\r\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\r\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\r\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\r\n                {% endset %}\r\n\r\n                {% do exceptions.raise_compiler_error(fail_msg) %}\r\n\r\n            {# -- unless we ignore, run the sync operation per the config #}\r\n            {% else %}\r\n\r\n                {% do sync_column_schemas(\r\n                    on_schema_change, target_relation, schema_changes_dict\r\n                ) %}\r\n\r\n            {% endif %}\r\n\r\n        {% endif %}\r\n\r\n        {{ return(schema_changes_dict[\"source_columns\"]) }}\r\n\r\n    {% endif %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5687623, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\r\n\r\n    {{ return(adapter.dispatch(\"get_incremental_append_sql\", \"dbt\")(arg_dict)) }}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.569765, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\r\n\r\n    {% do return(\r\n        get_insert_into_sql(\r\n            arg_dict[\"target_relation\"],\r\n            arg_dict[\"temp_relation\"],\r\n            arg_dict[\"dest_columns\"],\r\n        )\r\n    ) %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5708103, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\r\n\r\n    {{\r\n        return(\r\n            adapter.dispatch(\"get_incremental_delete_insert_sql\", \"dbt\")(arg_dict)\r\n        )\r\n    }}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5708103, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\r\n\r\n    {% do return(\r\n        get_delete_insert_merge_sql(\r\n            arg_dict[\"target_relation\"],\r\n            arg_dict[\"temp_relation\"],\r\n            arg_dict[\"unique_key\"],\r\n            arg_dict[\"dest_columns\"],\r\n            arg_dict[\"incremental_predicates\"],\r\n        )\r\n    ) %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5718071, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\r\n\r\n    {{ return(adapter.dispatch(\"get_incremental_merge_sql\", \"dbt\")(arg_dict)) }}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5718071, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\r\n\r\n    {% do return(\r\n        get_merge_sql(\r\n            arg_dict[\"target_relation\"],\r\n            arg_dict[\"temp_relation\"],\r\n            arg_dict[\"unique_key\"],\r\n            arg_dict[\"dest_columns\"],\r\n            arg_dict[\"incremental_predicates\"],\r\n        )\r\n    ) %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5728085, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\r\n\r\n    {{\r\n        return(\r\n            adapter.dispatch(\"get_incremental_insert_overwrite_sql\", \"dbt\")(arg_dict)\r\n        )\r\n    }}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5728085, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\r\n\r\n    {% do return(\r\n        get_insert_overwrite_merge_sql(\r\n            arg_dict[\"target_relation\"],\r\n            arg_dict[\"temp_relation\"],\r\n            arg_dict[\"dest_columns\"],\r\n            arg_dict[\"incremental_predicates\"],\r\n        )\r\n    ) %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5743134, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\r\n\r\n    {{ return(adapter.dispatch(\"get_incremental_default_sql\", \"dbt\")(arg_dict)) }}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5743134, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\r\n\r\n    {% do return(get_incremental_append_sql(arg_dict)) %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5753207, "supported_languages": null}, "macro.dbt.get_incremental_microbatch_sql": {"name": "get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_microbatch_sql", "macro_sql": "{% macro get_incremental_microbatch_sql(arg_dict) %}\r\n\r\n    {{ return(adapter.dispatch(\"get_incremental_microbatch_sql\", \"dbt\")(arg_dict)) }}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_incremental_microbatch_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5753207, "supported_languages": null}, "macro.dbt.default__get_incremental_microbatch_sql": {"name": "default__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_microbatch_sql", "macro_sql": "{% macro default__get_incremental_microbatch_sql(arg_dict) %}\r\n\r\n    {{\r\n        exceptions.raise_not_implemented(\r\n            \"microbatch materialization strategy not implemented for adapter \"\r\n            + adapter.type()\r\n        )\r\n    }}\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5753207, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\r\n\r\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\r\n\r\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\r\n    (\r\n        select {{ dest_cols_csv }}\r\n        from {{ temp_relation }}\r\n    )\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5773232, "supported_languages": null}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\r\n    {{ adapter.dispatch(\"create_csv_table\", \"dbt\")(model, agate_table) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5793226, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\r\n    {%- set column_override = model[\"config\"].get(\"column_types\", {}) -%}\r\n    {%- set quote_seed_column = model[\"config\"].get(\"quote_columns\", None) -%}\r\n\r\n    {% set sql %}\r\n    create table {{ this.render() }} (\r\n        {%- for col_name in agate_table.column_names -%}\r\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\r\n            {%- set type = column_override.get(col_name, inferred_type) -%}\r\n            {%- set column_name = (col_name | string) -%}\r\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\r\n        {%- endfor -%}\r\n    )\r\n    {% endset %}\r\n\r\n    {% call statement(\"_\") -%} {{ sql }} {%- endcall %}\r\n\r\n    {{ return(sql) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5818262, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\r\n    {{\r\n        adapter.dispatch(\"reset_csv_table\", \"dbt\")(\r\n            model, full_refresh, old_relation, agate_table\r\n        )\r\n    }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5818262, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\r\n    {% set sql = \"\" %}\r\n    {% if full_refresh %}\r\n        {{ adapter.drop_relation(old_relation) }}\r\n        {% set sql = create_csv_table(model, agate_table) %}\r\n    {% else %}\r\n        {{ adapter.truncate_relation(old_relation) }}\r\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\r\n    {% endif %}\r\n\r\n    {{ return(sql) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5838346, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\r\n    {{ adapter.dispatch(\"get_csv_sql\", \"dbt\")(create_or_truncate_sql, insert_sql) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5848324, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\r\n    {{ create_or_truncate_sql }}\r\n    ;\r\n    -- dbt seed --\r\n    {{ insert_sql }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5848324, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\r\n    {{ adapter.dispatch(\"get_binding_char\", \"dbt\")() }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5848324, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %} {{ return(\"%s\") }} {% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5858335, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\r\n    {{ return(adapter.dispatch(\"get_batch_size\", \"dbt\")()) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5868363, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %} {{ return(10000) }} {% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5868363, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\r\n    {%- set quote_seed_column = model[\"config\"].get(\"quote_columns\", None) -%}\r\n    {% set quoted = [] %}\r\n    {% for col in column_names -%}\r\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\r\n    {%- endfor %}\r\n\r\n    {%- set dest_cols_csv = quoted | join(\", \") -%}\r\n    {{ return(dest_cols_csv) }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.587834, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\r\n    {{ adapter.dispatch(\"load_csv_rows\", \"dbt\")(model, agate_table) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5888333, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\r\n\r\n    {% set batch_size = get_batch_size() %}\r\n\r\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\r\n    {% set bindings = [] %}\r\n\r\n    {% set statements = [] %}\r\n\r\n    {% for chunk in agate_table.rows | batch(batch_size) %}\r\n        {% set bindings = [] %}\r\n\r\n        {% for row in chunk %} {% do bindings.extend(row) %} {% endfor %}\r\n\r\n        {% set sql %}\r\n          insert into {{ this.render() }} ({{ cols_sql }}) values\r\n          {% for row in chunk -%}\r\n              ({%- for column in agate_table.column_names -%}\r\n                  {{ get_binding_char() }}\r\n                  {%- if not loop.last%},{%- endif %}\r\n              {%- endfor -%})\r\n              {%- if not loop.last%},{%- endif %}\r\n          {%- endfor %}\r\n        {% endset %}\r\n\r\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\r\n\r\n        {% if loop.index0 == 0 %} {% do statements.append(sql) %} {% endif %}\r\n    {% endfor %}\r\n\r\n    {# Return SQL so we can render it out into the compiled files #}\r\n    {{ return(statements[0]) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5918336, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\seed.sql", "original_file_path": "macros\\materializations\\seeds\\seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\r\n\r\n    {%- set identifier = model[\"alias\"] -%}\r\n    {%- set full_refresh_mode = should_full_refresh() -%}\r\n\r\n    {%- set old_relation = adapter.get_relation(\r\n        database=database, schema=schema, identifier=identifier\r\n    ) -%}\r\n\r\n    {%- set exists_as_table = old_relation is not none and old_relation.is_table -%}\r\n    {%- set exists_as_view = old_relation is not none and old_relation.is_view -%}\r\n\r\n    {%- set grant_config = config.get(\"grants\") -%}\r\n    {%- set agate_table = load_agate_table() -%}\r\n    -- grab current tables grants config for comparison later on\r\n    {%- do store_result(\"agate_table\", response=\"OK\", agate_table=agate_table) -%}\r\n\r\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n\r\n    -- `BEGIN` happens here:\r\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n\r\n    -- build model\r\n    {% set create_table_sql = \"\" %}\r\n    {% if exists_as_view %}\r\n        {{\r\n            exceptions.raise_compiler_error(\r\n                \"Cannot seed to '{}', it is a view\".format(old_relation.render())\r\n            )\r\n        }}\r\n    {% elif exists_as_table %}\r\n        {% set create_table_sql = reset_csv_table(\r\n            model, full_refresh_mode, old_relation, agate_table\r\n        ) %}\r\n    {% else %} {% set create_table_sql = create_csv_table(model, agate_table) %}\r\n    {% endif %}\r\n\r\n    {% set code = \"CREATE\" if full_refresh_mode else \"INSERT\" %}\r\n    {% set rows_affected = agate_table.rows | length %}\r\n    {% set sql = load_csv_rows(model, agate_table) %}\r\n\r\n    {% call noop_statement(\"main\", code ~ \" \" ~ rows_affected, code, rows_affected) %}\r\n        {{ get_csv_sql(create_table_sql, sql) }}\r\n        ;\r\n    {% endcall %}\r\n\r\n    {% set target_relation = this.incorporate(type=\"table\") %}\r\n\r\n    {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\r\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\r\n\r\n    {% do persist_docs(target_relation, model) %}\r\n\r\n    {% if full_refresh_mode or not exists_as_table %}\r\n        {% do create_indexes(target_relation) %}\r\n    {% endif %}\r\n\r\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n\r\n    -- `COMMIT` happens here\r\n    {{ adapter.commit() }}\r\n\r\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n\r\n    {{ return({\"relations\": [target_relation]}) }}\r\n\r\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.5968356, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\r\n    {{ adapter.dispatch(\"create_columns\", \"dbt\")(relation, columns) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.599833, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\r\n    {% for column in columns %}\r\n        {% call statement() %}\r\n      alter table {{ relation.render() }} add column \"{{ column.name }}\" {{ column.data_type }};\r\n        {% endcall %}\r\n    {% endfor %}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.599833, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\r\n    {{ adapter.dispatch(\"post_snapshot\", \"dbt\")(staging_relation) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.599833, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\r\n{# no-op #}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6008325, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\r\n    {{ adapter.dispatch(\"get_true_sql\", \"dbt\")() }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6008325, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %} {{ return(\"TRUE\") }} {% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6008325, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\r\n    {{\r\n        adapter.dispatch(\"snapshot_staging_table\", \"dbt\")(\r\n            strategy, source_sql, target_relation\r\n        )\r\n    }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6008325, "supported_languages": null}, "macro.dbt.get_snapshot_table_column_names": {"name": "get_snapshot_table_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_snapshot_table_column_names", "macro_sql": "{% macro get_snapshot_table_column_names() %}\r\n    {{\r\n        return(\r\n            {\r\n                \"dbt_valid_to\": \"dbt_valid_to\",\r\n                \"dbt_valid_from\": \"dbt_valid_from\",\r\n                \"dbt_scd_id\": \"dbt_scd_id\",\r\n                \"dbt_updated_at\": \"dbt_updated_at\",\r\n                \"dbt_is_deleted\": \"dbt_is_deleted\",\r\n            }\r\n        )\r\n    }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6018329, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\r\n    {% set columns = (\r\n        config.get(\"snapshot_table_column_names\")\r\n        or get_snapshot_table_column_names()\r\n    ) %}\r\n    {% if strategy.hard_deletes == \"new_record\" %}\r\n        {% set new_scd_id = snapshot_hash_arguments(\r\n            [columns.dbt_scd_id, snapshot_get_time()]\r\n        ) %}\r\n    {% endif %}\r\n    with\r\n        snapshot_query as ({{ source_sql }}),\r\n\r\n        snapshotted_data as (\r\n\r\n            select *, {{ unique_key_fields(strategy.unique_key) }}\r\n            from {{ target_relation }}\r\n            where\r\n                {% if config.get(\"dbt_valid_to_current\") %}\r\n                    {% set source_unique_key = columns.dbt_valid_to | trim %}\r\n                    {% set target_unique_key = (\r\n                        config.get(\"dbt_valid_to_current\") | trim\r\n                    ) %}\r\n\r\n                    {# The exact equals semantics between NULL values depends on the current behavior flag set. Also, update records if the source field is null #}\r\n                    (\r\n                        {{ equals(source_unique_key, target_unique_key) }}\r\n                        or {{ source_unique_key }} is null\r\n                    )\r\n                {% else %} {{ columns.dbt_valid_to }} is null\r\n                {% endif %}\r\n\r\n        ),\r\n\r\n        insertions_source_data as (\r\n\r\n            select\r\n                *,\r\n                {{ unique_key_fields(strategy.unique_key) }},\r\n                {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\r\n                {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\r\n                {{ get_dbt_valid_to_current(strategy, columns) }},\r\n                {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\r\n\r\n            from snapshot_query\r\n        ),\r\n\r\n        updates_source_data as (\r\n\r\n            select\r\n                *,\r\n                {{ unique_key_fields(strategy.unique_key) }},\r\n                {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\r\n                {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\r\n                {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\r\n\r\n            from snapshot_query\r\n        ),\r\n\r\n        {%- if strategy.hard_deletes == \"invalidate\" or strategy.hard_deletes == \"new_record\" %}\r\n\r\n            deletes_source_data as (\r\n\r\n                select *, {{ unique_key_fields(strategy.unique_key) }}\r\n                from snapshot_query\r\n            ),\r\n        {% endif %}\r\n\r\n        insertions as (\r\n\r\n            select\r\n                'insert' as dbt_change_type,\r\n                source_data.*\r\n                {%- if strategy.hard_deletes == \"new_record\" -%}\r\n                    , 'False' as {{ columns.dbt_is_deleted }}\r\n                {%- endif %}\r\n\r\n            from insertions_source_data as source_data\r\n            left outer join\r\n                snapshotted_data\r\n                on {{\r\n                    unique_key_join_on(\r\n                        strategy.unique_key, \"snapshotted_data\", \"source_data\"\r\n                    )\r\n                }}\r\n            where\r\n                {{ unique_key_is_null(strategy.unique_key, \"snapshotted_data\") }}\r\n                or (\r\n                    {{\r\n                        unique_key_is_not_null(\r\n                            strategy.unique_key, \"snapshotted_data\"\r\n                        )\r\n                    }} and ({{ strategy.row_changed }})\r\n\r\n                )\r\n\r\n        ),\r\n\r\n        updates as (\r\n\r\n            select\r\n                'update' as dbt_change_type,\r\n                source_data.*,\r\n                snapshotted_data.{{ columns.dbt_scd_id }}\r\n                {%- if strategy.hard_deletes == \"new_record\" -%}\r\n                    , snapshotted_data.{{ columns.dbt_is_deleted }}\r\n                {%- endif %}\r\n\r\n            from updates_source_data as source_data\r\n            join\r\n                snapshotted_data\r\n                on {{\r\n                    unique_key_join_on(\r\n                        strategy.unique_key, \"snapshotted_data\", \"source_data\"\r\n                    )\r\n                }}\r\n            where ({{ strategy.row_changed }})\r\n        )\r\n\r\n        {%- if strategy.hard_deletes == \"invalidate\" or strategy.hard_deletes == \"new_record\" %}\r\n            ,\r\n            deletes as (\r\n\r\n                select\r\n                    'delete' as dbt_change_type,\r\n                    source_data.*,\r\n                    {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\r\n                    {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\r\n                    {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\r\n                    snapshotted_data.{{ columns.dbt_scd_id }}\r\n                    {%- if strategy.hard_deletes == \"new_record\" -%}\r\n                        , snapshotted_data.{{ columns.dbt_is_deleted }}\r\n                    {%- endif %}\r\n                from snapshotted_data\r\n                left join\r\n                    deletes_source_data as source_data\r\n                    on {{\r\n                        unique_key_join_on(\r\n                            strategy.unique_key, \"snapshotted_data\", \"source_data\"\r\n                        )\r\n                    }}\r\n                where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\r\n            )\r\n        {%- endif %}\r\n\r\n        {%- if strategy.hard_deletes == \"new_record\" %}\r\n            {% set source_sql_cols = get_column_schema_from_query(source_sql) %},\r\n            deletion_records as (\r\n\r\n                select\r\n                    'insert' as dbt_change_type,\r\n                    {%- for col in source_sql_cols -%}\r\n                        snapshotted_data.{{ adapter.quote(col.column) }},\r\n                    {% endfor -%}\r\n                    {%- if strategy.unique_key | is_list -%}\r\n                        {%- for key in strategy.unique_key -%}\r\n                            snapshotted_data.{{ key }}\r\n                            as dbt_unique_key_{{ loop.index }},\r\n                        {% endfor -%}\r\n                    {%- else -%} snapshotted_data.dbt_unique_key as dbt_unique_key,\r\n                    {% endif -%}\r\n                    {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\r\n                    {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\r\n                    snapshotted_data.{{ columns.dbt_valid_to }}\r\n                    as {{ columns.dbt_valid_to }},\r\n                    {{ new_scd_id }} as {{ columns.dbt_scd_id }},\r\n                    'True' as {{ columns.dbt_is_deleted }}\r\n                from snapshotted_data\r\n                left join\r\n                    deletes_source_data as source_data\r\n                    on {{\r\n                        unique_key_join_on(\r\n                            strategy.unique_key, \"snapshotted_data\", \"source_data\"\r\n                        )\r\n                    }}\r\n                where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\r\n\r\n            )\r\n        {%- endif %}\r\n\r\n    select *\r\n    from insertions\r\n    union all\r\n    select *\r\n    from updates\r\n    {%- if strategy.hard_deletes == \"invalidate\" or strategy.hard_deletes == \"new_record\" %}\r\n        union all\r\n        select *\r\n        from deletes\r\n    {%- endif %}\r\n    {%- if strategy.hard_deletes == \"new_record\" %}\r\n        union all\r\n        select *\r\n        from deletion_records\r\n    {%- endif %}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments", "macro.dbt.snapshot_get_time", "macro.dbt.unique_key_fields", "macro.dbt.equals", "macro.dbt.get_dbt_valid_to_current", "macro.dbt.unique_key_join_on", "macro.dbt.unique_key_is_null", "macro.dbt.unique_key_is_not_null", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6068351, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\r\n    {{ adapter.dispatch(\"build_snapshot_table\", \"dbt\")(strategy, sql) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.607836, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\r\n    {% set columns = (\r\n        config.get(\"snapshot_table_column_names\")\r\n        or get_snapshot_table_column_names()\r\n    ) %}\r\n\r\n    select\r\n        *,\r\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\r\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\r\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\r\n        {{ get_dbt_valid_to_current(strategy, columns) }}\r\n        {%- if strategy.hard_deletes == \"new_record\" -%}\r\n            , 'False' as {{ columns.dbt_is_deleted }}\r\n        {% endif -%}\r\n    from ({{ sql }}) sbq\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.get_dbt_valid_to_current"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6088362, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\r\n    {% set temp_relation = make_temp_relation(target_relation) %}\r\n\r\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\r\n\r\n    {% call statement(\"build_snapshot_staging_relation\") %}\r\n        {{ create_table_as(True, temp_relation, select) }}\r\n    {% endcall %}\r\n\r\n    {% do return(temp_relation) %}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6088362, "supported_languages": null}, "macro.dbt.get_updated_at_column_data_type": {"name": "get_updated_at_column_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_updated_at_column_data_type", "macro_sql": "{% macro get_updated_at_column_data_type(snapshot_sql) %}\r\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\r\n    {% set dbt_updated_at_data_type = null %}\r\n    {% set ns = namespace() -%}  {#- - handle for-loop scoping with a namespace --#}\r\n    {% set ns.dbt_updated_at_data_type = null -%}\r\n    {% for column in snapshot_sql_column_schema %}\r\n        {% if (\r\n            (column.column == \"dbt_updated_at\")\r\n            or (column.column == \"DBT_UPDATED_AT\")\r\n        ) %}\r\n            {% set ns.dbt_updated_at_data_type = column.dtype %}\r\n        {% endif %}\r\n    {% endfor %}\r\n    {{ return(ns.dbt_updated_at_data_type or none) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6098359, "supported_languages": null}, "macro.dbt.check_time_data_types": {"name": "check_time_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.check_time_data_types", "macro_sql": "{% macro check_time_data_types(sql) %}\r\n    {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\r\n    {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\r\n    {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\r\n        {% if exceptions.warn_snapshot_timestamp_data_types %}\r\n            {{\r\n                exceptions.warn_snapshot_timestamp_data_types(\r\n                    snapshot_get_time_data_type, dbt_updated_at_data_type\r\n                )\r\n            }}\r\n        {% endif %}\r\n    {% endif %}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_updated_at_column_data_type", "macro.dbt.get_snapshot_get_time_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.610836, "supported_languages": null}, "macro.dbt.get_dbt_valid_to_current": {"name": "get_dbt_valid_to_current", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_dbt_valid_to_current", "macro_sql": "{% macro get_dbt_valid_to_current(strategy, columns) %}\r\n    {% set dbt_valid_to_current = config.get(\"dbt_valid_to_current\") or \"null\" %}\r\n    coalesce(\r\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}),\r\n        {{ dbt_valid_to_current }}\r\n    ) as {{ columns.dbt_valid_to }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.610836, "supported_languages": null}, "macro.dbt.unique_key_fields": {"name": "unique_key_fields", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.unique_key_fields", "macro_sql": "{% macro unique_key_fields(unique_key) %}\r\n    {% if unique_key | is_list %}\r\n        {% for key in unique_key %}\r\n            {{ key }} as dbt_unique_key_{{ loop.index }}\r\n            {%- if not loop.last %}, {%- endif %}\r\n        {% endfor %}\r\n    {% else %} {{ unique_key }} as dbt_unique_key\r\n    {% endif %}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6118362, "supported_languages": null}, "macro.dbt.unique_key_join_on": {"name": "unique_key_join_on", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.unique_key_join_on", "macro_sql": "{% macro unique_key_join_on(unique_key, identifier, from_identifier) %}\r\n    {% if unique_key | is_list %}\r\n        {% for key in unique_key %}\r\n            {% set source_unique_key = (\r\n                identifier ~ \".dbt_unique_key_\" ~ loop.index\r\n            ) | trim %}\r\n            {% set target_unique_key = (\r\n                from_identifier ~ \".dbt_unique_key_\" ~ loop.index\r\n            ) | trim %}\r\n            {{ equals(source_unique_key, target_unique_key) }}\r\n            {%- if not loop.last %} and {%- endif %}\r\n        {% endfor %}\r\n    {% else %} {{ identifier }}.dbt_unique_key = {{ from_identifier }}.dbt_unique_key\r\n    {% endif %}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6128356, "supported_languages": null}, "macro.dbt.unique_key_is_null": {"name": "unique_key_is_null", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.unique_key_is_null", "macro_sql": "{% macro unique_key_is_null(unique_key, identifier) %}\r\n    {% if unique_key | is_list %} {{ identifier }}.dbt_unique_key_1 is null\r\n    {% else %} {{ identifier }}.dbt_unique_key is null\r\n    {% endif %}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6138332, "supported_languages": null}, "macro.dbt.unique_key_is_not_null": {"name": "unique_key_is_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.unique_key_is_not_null", "macro_sql": "{% macro unique_key_is_not_null(unique_key, identifier) %}\r\n    {% if unique_key | is_list %} {{ identifier }}.dbt_unique_key_1 is not null\r\n    {% else %} {{ identifier }}.dbt_unique_key is not null\r\n    {% endif %}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6138332, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\r\n\r\n    {%- set target_table = model.get(\"alias\", model.get(\"name\")) -%}\r\n\r\n    {%- set strategy_name = config.get(\"strategy\") -%}\r\n    {%- set unique_key = config.get(\"unique_key\") %}\r\n    -- grab current tables grants config for comparision later on\r\n    {%- set grant_config = config.get(\"grants\") -%}\r\n\r\n    {% set target_relation_exists, target_relation = get_or_create_relation(\r\n        database=model.database,\r\n        schema=model.schema,\r\n        identifier=target_table,\r\n        type=\"table\",\r\n    ) -%}\r\n\r\n    {%- if not target_relation.is_table -%}\r\n        {% do exceptions.relation_wrong_type(target_relation, \"table\") %}\r\n    {%- endif -%}\r\n\r\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n\r\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n\r\n    {% set strategy_macro = strategy_dispatch(strategy_name) %}\r\n    {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\r\n    {# It was a dictionary of config, instead of the config object from the context #}\r\n    {% set strategy = strategy_macro(\r\n        model,\r\n        \"snapshotted_data\",\r\n        \"source_data\",\r\n        model[\"config\"],\r\n        target_relation_exists,\r\n    ) %}\r\n\r\n    {% if not target_relation_exists %}\r\n\r\n        {% set build_sql = build_snapshot_table(strategy, model[\"compiled_code\"]) %}\r\n        {% set build_or_select_sql = build_sql %}\r\n        {% set final_sql = create_table_as(False, target_relation, build_sql) %}\r\n\r\n    {% else %}\r\n\r\n        {% set columns = (\r\n            config.get(\"snapshot_table_column_names\")\r\n            or get_snapshot_table_column_names()\r\n        ) %}\r\n\r\n        {{\r\n            adapter.assert_valid_snapshot_target_given_strategy(\r\n                target_relation, columns, strategy\r\n            )\r\n        }}\r\n\r\n        {% set build_or_select_sql = snapshot_staging_table(\r\n            strategy, sql, target_relation\r\n        ) %}\r\n        {% set staging_table = build_snapshot_staging_table(\r\n            strategy, sql, target_relation\r\n        ) %}\r\n\r\n        -- this may no-op if the database does not require column expansion\r\n        {% do adapter.expand_target_column_types(\r\n            from_relation=staging_table, to_relation=target_relation\r\n        ) %}\r\n\r\n        {% set remove_columns = [\r\n            \"dbt_change_type\",\r\n            \"DBT_CHANGE_TYPE\",\r\n            \"dbt_unique_key\",\r\n            \"DBT_UNIQUE_KEY\",\r\n        ] %}\r\n        {% if unique_key | is_list %}\r\n            {% for key in strategy.unique_key %}\r\n                {{ remove_columns.append(\"dbt_unique_key_\" + loop.index | string) }}\r\n                {{ remove_columns.append(\"DBT_UNIQUE_KEY_\" + loop.index | string) }}\r\n            {% endfor %}\r\n        {% endif %}\r\n\r\n        {% set missing_columns = (\r\n            adapter.get_missing_columns(staging_table, target_relation)\r\n            | rejectattr(\"name\", \"in\", remove_columns)\r\n            | list\r\n        ) %}\r\n\r\n        {% do create_columns(target_relation, missing_columns) %}\r\n\r\n        {% set source_columns = (\r\n            adapter.get_columns_in_relation(staging_table)\r\n            | rejectattr(\"name\", \"in\", remove_columns)\r\n            | list\r\n        ) %}\r\n\r\n        {% set quoted_source_columns = [] %}\r\n        {% for column in source_columns %}\r\n            {% do quoted_source_columns.append(adapter.quote(column.name)) %}\r\n        {% endfor %}\r\n\r\n        {% set final_sql = snapshot_merge_sql(\r\n            target=target_relation,\r\n            source=staging_table,\r\n            insert_cols=quoted_source_columns,\r\n        ) %}\r\n\r\n    {% endif %}\r\n\r\n    {{ check_time_data_types(build_or_select_sql) }}\r\n\r\n    {% call statement(\"main\") %} {{ final_sql }} {% endcall %}\r\n\r\n    {% set should_revoke = should_revoke(\r\n        target_relation_exists, full_refresh_mode=False\r\n    ) %}\r\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\r\n\r\n    {% do persist_docs(target_relation, model) %}\r\n\r\n    {% if not target_relation_exists %}\r\n        {% do create_indexes(target_relation) %}\r\n    {% endif %}\r\n\r\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n\r\n    {{ adapter.commit() }}\r\n\r\n    {% if staging_table is defined %} {% do post_snapshot(staging_table) %} {% endif %}\r\n\r\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n\r\n    {{ return({\"relations\": [target_relation]}) }}\r\n\r\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_staging_table", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.check_time_data_types", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6208384, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\r\n    {{ adapter.dispatch(\"snapshot_merge_sql\", \"dbt\")(target, source, insert_cols) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.621839, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\r\n    {%- set insert_cols_csv = insert_cols | join(\", \") -%}\r\n\r\n    {%- set columns = (\r\n        config.get(\"snapshot_table_column_names\")\r\n        or get_snapshot_table_column_names()\r\n    ) -%}\r\n\r\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\r\n    using {{ source }} as DBT_INTERNAL_SOURCE\r\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\r\n\r\n    when matched\r\n    {% if config.get(\"dbt_valid_to_current\") %}\r\n        {% set source_unique_key = (\r\n            \"DBT_INTERNAL_DEST.\" ~ columns.dbt_valid_to\r\n        ) | trim %}\r\n        {% set target_unique_key = config.get(\"dbt_valid_to_current\") | trim %}\r\n\tand ({{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null)\r\n\r\n    {% else %}\r\n       and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\r\n    {% endif %}\r\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\r\n        then update\r\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\r\n\r\n    when not matched\r\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\r\n        then insert ({{ insert_cols_csv }})\r\n        values ({{ insert_cols_csv }})\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6228414, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\r\n    {% set original_name = name %}\r\n    {% if \".\" in name %} {% set package_name, name = name.split(\".\", 1) %}\r\n    {% else %} {% set package_name = none %}\r\n    {% endif %}\r\n\r\n    {% if package_name is none %} {% set package_context = context %}\r\n    {% elif package_name in context %} {% set package_context = context[package_name] %}\r\n    {% else %}\r\n        {% set error_msg %}\r\n        Could not find package '{{package_name}}', called with '{{original_name}}'\r\n        {% endset %}\r\n        {{ exceptions.raise_compiler_error(error_msg | trim) }}\r\n    {% endif %}\r\n\r\n    {%- set search_name = \"snapshot_\" ~ name ~ \"_strategy\" -%}\r\n\r\n    {% if search_name not in package_context %}\r\n        {% set error_msg %}\r\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\r\n        {% endset %}\r\n        {{ exceptions.raise_compiler_error(error_msg | trim) }}\r\n    {% endif %}\r\n    {{ return(package_context[search_name]) }}\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6268384, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\r\n    {{ adapter.dispatch(\"snapshot_hash_arguments\", \"dbt\")(args) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6268384, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\r\n    md5(\r\n        {%- for arg in args -%}\r\n            coalesce(cast({{ arg }} as varchar), '')\r\n            {% if not loop.last %} || '|' || {% endif %}\r\n        {%- endfor -%}\r\n    )\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6268384, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(\r\n    node, snapshotted_rel, current_rel, model_config, target_exists\r\n) %}\r\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\r\n    {% set primary_key = config.get(\"unique_key\") %}\r\n    {% set updated_at = config.get(\"updated_at\") %}\r\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\r\n    {% set invalidate_hard_deletes = hard_deletes == \"invalidate\" %}\r\n    {% set columns = (\r\n        config.get(\"snapshot_table_column_names\")\r\n        or get_snapshot_table_column_names()\r\n    ) %}\r\n\r\n    {#/*\r\n        The snapshot relation might not have an {{ updated_at }} value if the\r\n        snapshot strategy is changed from `check` to `timestamp`. We\r\n        should use a dbt-created column for the comparison in the snapshot\r\n        table instead of assuming that the user-supplied {{ updated_at }}\r\n        will be present in the historical data.\r\n\r\n        See https://github.com/dbt-labs/dbt-core/issues/2350\r\n    */ #}\r\n    {% set row_changed_expr -%}\r\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\r\n    {%- endset %}\r\n\r\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\r\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\r\n\r\n    {% do return(\r\n        {\r\n            \"unique_key\": primary_key,\r\n            \"updated_at\": updated_at,\r\n            \"row_changed\": row_changed_expr,\r\n            \"scd_id\": scd_id_expr,\r\n            \"invalidate_hard_deletes\": invalidate_hard_deletes,\r\n            \"hard_deletes\": hard_deletes,\r\n        }\r\n    ) %}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6288383, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\r\n    {{ adapter.dispatch(\"snapshot_string_as_time\", \"dbt\")(timestamp) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6288383, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\r\n    {% do exceptions.raise_not_implemented(\r\n        \"snapshot_string_as_time macro not implemented for adapter \"\r\n        + adapter.type()\r\n    ) %}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6298409, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(\r\n    node, target_exists, check_cols_config\r\n) -%}\r\n    {%- if not target_exists -%}\r\n        {#- - no table yet -> return whatever the query does --#}\r\n        {{ return((false, query_columns)) }}\r\n    {%- endif -%}\r\n\r\n    {#- - handle any schema changes --#}\r\n    {%- set target_relation = adapter.get_relation(\r\n        database=node.database, schema=node.schema, identifier=node.alias\r\n    ) -%}\r\n\r\n    {% if check_cols_config == \"all\" %}\r\n        {%- set query_columns = get_columns_in_query(node[\"compiled_code\"]) -%}\r\n\r\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\r\n        {#- - query for proper casing/quoting, to support comparison below --#}\r\n        {%- set select_check_cols_from_target -%}\r\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\r\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\r\n            select {{ check_cols_config | join(', ') }} from (\r\n                {{ node['compiled_code'] }}\r\n            ) subq\r\n        {%- endset -%}\r\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\r\n\r\n    {% else %}\r\n        {% do exceptions.raise_compiler_error(\r\n            \"Invalid value for 'check_cols': \" ~ check_cols_config\r\n        ) %}\r\n    {% endif %}\r\n\r\n    {%- set existing_cols = (\r\n        adapter.get_columns_in_relation(target_relation)\r\n        | map(attribute=\"name\")\r\n        | list\r\n    ) -%}\r\n    {%- set ns = namespace() -%}  {#- - handle for-loop scoping with a namespace --#}\r\n    {%- set ns.column_added = false -%}\r\n\r\n    {%- set intersection = [] -%}\r\n    {%- for col in query_columns -%}\r\n        {%- if col in existing_cols -%}\r\n            {%- do intersection.append(adapter.quote(col)) -%}\r\n        {%- else -%} {% set ns.column_added = true %}\r\n        {%- endif -%}\r\n    {%- endfor -%}\r\n    {{ return((ns.column_added, intersection)) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6318393, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(\r\n    node, snapshotted_rel, current_rel, model_config, target_exists\r\n) %}\r\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\r\n    {% set check_cols_config = config.get(\"check_cols\") %}\r\n    {% set primary_key = config.get(\"unique_key\") %}\r\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\r\n    {% set invalidate_hard_deletes = hard_deletes == \"invalidate\" %}\r\n    {% set updated_at = config.get(\"updated_at\") or snapshot_get_time() %}\r\n\r\n    {% set column_added = false %}\r\n\r\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(\r\n        node, target_exists, check_cols_config\r\n    ) %}\r\n\r\n    {%- set row_changed_expr -%}\r\n    (\r\n    {%- if column_added -%}\r\n        {{ get_true_sql() }}\r\n    {%- else -%}\r\n    {%- for col in check_cols -%}\r\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\r\n        or\r\n        (\r\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\r\n            or\r\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\r\n        )\r\n        {%- if not loop.last %} or {% endif -%}\r\n    {%- endfor -%}\r\n    {%- endif -%}\r\n    )\r\n    {%- endset %}\r\n\r\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\r\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\r\n\r\n    {% do return(\r\n        {\r\n            \"unique_key\": primary_key,\r\n            \"updated_at\": updated_at,\r\n            \"row_changed\": row_changed_expr,\r\n            \"scd_id\": scd_id_expr,\r\n            \"invalidate_hard_deletes\": invalidate_hard_deletes,\r\n            \"hard_deletes\": hard_deletes,\r\n        }\r\n    ) %}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6338403, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\r\n    {{\r\n        adapter.dispatch(\"get_test_sql\", \"dbt\")(\r\n            main_sql, fail_calc, warn_if, error_if, limit\r\n        )\r\n    }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6353457, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\r\n    select\r\n        {{ fail_calc }} as failures,\r\n        {{ fail_calc }} {{ warn_if }} as should_warn,\r\n        {{ fail_calc }} {{ error_if }} as should_error\r\n    from ({{ main_sql }} {{ \"limit \" ~ limit if limit != none }}) dbt_internal_test\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6353457, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\r\n    {{\r\n        adapter.dispatch(\"get_unit_test_sql\", \"dbt\")(\r\n            main_sql, expected_fixture_sql, expected_column_names\r\n        )\r\n    }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6363537, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(\r\n    main_sql, expected_fixture_sql, expected_column_names\r\n) -%}\r\n    -- Build actual result given inputs\r\n    with\r\n        dbt_internal_unit_test_actual as (\r\n            select\r\n                {% for expected_column_name in expected_column_names %}\r\n                    {{ expected_column_name }}{% if not loop.last -%},{% endif %}\r\n                {%- endfor -%},\r\n                {{ dbt.string_literal(\"actual\") }}\r\n                as {{ adapter.quote(\"actual_or_expected\") }}\r\n            from ({{ main_sql }}) _dbt_internal_unit_test_actual\r\n        ),\r\n        -- Build expected result\r\n        dbt_internal_unit_test_expected as (\r\n            select\r\n                {% for expected_column_name in expected_column_names %}\r\n                    {{ expected_column_name }}{% if not loop.last -%}, {% endif %}\r\n                {%- endfor -%},\r\n                {{ dbt.string_literal(\"expected\") }}\r\n                as {{ adapter.quote(\"actual_or_expected\") }}\r\n            from ({{ expected_fixture_sql }}) _dbt_internal_unit_test_expected\r\n        )\r\n    -- Union actual and expected results\r\n    select *\r\n    from dbt_internal_unit_test_actual\r\n    union all\r\n    select *\r\n    from dbt_internal_unit_test_expected\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.637354, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6413538, "supported_languages": ["sql"]}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\unit.sql", "original_file_path": "macros\\materializations\\tests\\unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6433537, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\r\n    {% do return(adapter.dispatch(\"get_where_subquery\", \"dbt\")(relation)) %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6443524, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\r\n    {% set where = config.get(\"where\", \"\") %}\r\n    {% if where %}\r\n        {%- set filtered -%}\r\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\r\n        {%- endset -%}\r\n        {% do return(filtered) %}\r\n    {%- else -%} {% do return(relation) %}\r\n    {%- endif -%}\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6449535, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\r\n    {{ return(adapter.dispatch(\"resolve_model_name\", \"dbt\")(input_model_name)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6459618, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\r\n\r\n{%- macro default__resolve_model_name(input_model_name) -%}\r\n    {{ input_model_name | string | replace('\"', '\"') }}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6459618, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\r\n\r\n    {%- set ref_dict = {} -%}\r\n    {%- for _ref in model.refs -%}\r\n        {% set _ref_args = (\r\n            [_ref.get(\"package\"), _ref[\"name\"]]\r\n            if _ref.get(\"package\")\r\n            else [\r\n                _ref[\"name\"],\r\n            ]\r\n        ) %}\r\n        {%- set resolved = ref(*_ref_args, v=_ref.get(\"version\")) -%}\r\n        {%- if _ref.get(\"version\") -%}\r\n            {% do _ref_args.extend([\"v\" ~ _ref[\"version\"]]) %}\r\n        {%- endif -%}\r\n        {%- do ref_dict.update(\r\n            {_ref_args | join(\".\"): resolve_model_name(resolved)}\r\n        ) -%}\r\n    {%- endfor -%}\r\n\r\n    def ref(* args, * * kwargs):\r\n    refs = {{ ref_dict | tojson }}\r\n    key = '.'.join(args)\r\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\r\n    if version:\r\n    key += f \".v{version}\"\r\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\r\n    return dbt_load_df_function(refs[key])\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6479633, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\r\n\r\n    {%- set source_dict = {} -%}\r\n    {%- for _source in model.sources -%}\r\n        {%- set resolved = source(*_source) -%}\r\n        {%- do source_dict.update(\r\n            {_source | join(\".\"): resolve_model_name(resolved)}\r\n        ) -%}\r\n    {%- endfor -%}\r\n\r\n    def source(* args, dbt_load_df_function):\r\n    sources = {{ source_dict | tojson }}\r\n    key = '.'.join(args)\r\n    return dbt_load_df_function(sources[key])\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6479633, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\r\n    {%- set config_dict = {} -%}\r\n    {% set config_dbt_used = (\r\n        zip(model.config.config_keys_used, model.config.config_keys_defaults)\r\n        | list\r\n    ) %}\r\n    {%- for key, default in config_dbt_used -%}\r\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\r\n        {%- if key == \"language\" -%} {%- set value = \"python\" -%} {%- endif -%}\r\n        {%- set value = model.config.get(key, default) -%}\r\n        {%- do config_dict.update({key: value}) -%}\r\n    {%- endfor -%}\r\n    config_dict = {{ config_dict }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6489618, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\r\n    # This part is user provided model code\r\n    # you will need to copy the next section to run the code\r\n    # COMMAND ----------\r\n    # this part is dbt logic for get ref work, do not modify\r\n    {{ build_ref_function(model) }}\r\n    {{ build_source_function(model) }}\r\n    {{ build_config_dict(model) }}\r\n\r\n    class config:\r\n    def __init__(self, * args, * * kwargs):\r\n    pass\r\n\r\n    @staticmethod\r\n    def get(key, default = none):\r\n    return config_dict.get(key, default)\r\n\r\n    class this:\r\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\r\n    database = \"{{ this.database }}\"\r\n    schema = \"{{ this.schema }}\"\r\n    identifier = \"{{ this.identifier }}\"\r\n    {% set this_relation_name = resolve_model_name(this) %}\r\n    def __repr__(self):\r\n    return '{{ this_relation_name  }}'\r\n\r\n    class dbtobj:\r\n    def __init__(self, load_df_function) -> none:\r\n    self.source = lambda * args:source(* args, dbt_load_df_function = load_df_function)\r\n    self.ref = lambda * args,\r\n    * * kwargs:ref(* args, * * kwargs, dbt_load_df_function = load_df_function)\r\n    self.config = config\r\n    self.this = this()\r\n    self.is_incremental = {{ is_incremental() }}\r\n\r\n    # COMMAND ----------\r\n    {{ py_script_comment() }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.649963, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{% macro py_script_comment() %} {% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.649963, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create.sql", "original_file_path": "macros\\relations\\create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\r\n    {{- log(\"Applying CREATE to: \" ~ relation) -}}\r\n    {{- adapter.dispatch(\"get_create_sql\", \"dbt\")(relation, sql) -}}\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6509628, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create.sql", "original_file_path": "macros\\relations\\create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\r\n\r\n    {%- if relation.is_view -%} {{ get_create_view_as_sql(relation, sql) }}\r\n\r\n    {%- elif relation.is_table -%} {{ get_create_table_as_sql(False, relation, sql) }}\r\n\r\n    {%- elif relation.is_materialized_view -%}\r\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\r\n\r\n    {%- else -%}\r\n        {{-\r\n            exceptions.raise_compiler_error(\r\n                \"`get_create_sql` has not been implemented for: \" ~ relation.type\r\n            )\r\n        -}}\r\n\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6509628, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_backup.sql", "original_file_path": "macros\\relations\\create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\r\n    {{- log(\"Applying CREATE BACKUP to: \" ~ relation) -}}\r\n    {{- adapter.dispatch(\"get_create_backup_sql\", \"dbt\")(relation) -}}\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6519625, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_backup.sql", "original_file_path": "macros\\relations\\create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\r\n\r\n    -- get the standard backup name\r\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\r\n\r\n    -- drop any pre-existing backup\r\n    {{ get_drop_sql(backup_relation) }}\r\n    ;\r\n\r\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6519625, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_intermediate.sql", "original_file_path": "macros\\relations\\create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\r\n    {{- log(\"Applying CREATE INTERMEDIATE to: \" ~ relation) -}}\r\n    {{- adapter.dispatch(\"get_create_intermediate_sql\", \"dbt\")(relation, sql) -}}\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6529624, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_intermediate.sql", "original_file_path": "macros\\relations\\create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\r\n\r\n    -- get the standard intermediate name\r\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\r\n\r\n    -- drop any pre-existing intermediate\r\n    {{ get_drop_sql(intermediate_relation) }}\r\n    ;\r\n\r\n    {{ get_create_sql(intermediate_relation, sql) }}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6529624, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\r\n    {{- log(\"Applying DROP to: \" ~ relation) -}}\r\n    {{- adapter.dispatch(\"get_drop_sql\", \"dbt\")(relation) -}}\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6539626, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\r\n\r\n    {%- if relation.is_view -%} {{ drop_view(relation) }}\r\n\r\n    {%- elif relation.is_table -%} {{ drop_table(relation) }}\r\n\r\n    {%- elif relation.is_materialized_view -%} {{ drop_materialized_view(relation) }}\r\n\r\n    {%- else -%}\r\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\r\n\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6539626, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\r\n    {{ return(adapter.dispatch(\"drop_relation\", \"dbt\")(relation)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6549625, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\r\n    {% call statement(\"drop_relation\", auto_begin=False) -%}\r\n        {{ get_drop_sql(relation) }}\r\n    {%- endcall %}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6549625, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\r\n    {% if relation is not none %} {{ adapter.drop_relation(relation) }} {% endif %}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6559625, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop_backup.sql", "original_file_path": "macros\\relations\\drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\r\n    {{- log(\"Applying DROP BACKUP to: \" ~ relation) -}}\r\n    {{- adapter.dispatch(\"get_drop_backup_sql\", \"dbt\")(relation) -}}\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6559625, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop_backup.sql", "original_file_path": "macros\\relations\\drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\r\n\r\n    -- get the standard backup name\r\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\r\n\r\n    {{ get_drop_sql(backup_relation) }}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6559625, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\r\n    {{- log(\"Applying RENAME to: \" ~ relation) -}}\r\n    {{- adapter.dispatch(\"get_rename_sql\", \"dbt\")(relation, new_name) -}}\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6569633, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\r\n\r\n    {%- if relation.is_view -%} {{ get_rename_view_sql(relation, new_name) }}\r\n\r\n    {%- elif relation.is_table -%} {{ get_rename_table_sql(relation, new_name) }}\r\n\r\n    {%- elif relation.is_materialized_view -%}\r\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\r\n\r\n    {%- else -%}\r\n        {{-\r\n            exceptions.raise_compiler_error(\r\n                \"`get_rename_sql` has not been implemented for: \" ~ relation.type\r\n            )\r\n        -}}\r\n\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6579635, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\r\n    {{\r\n        return(\r\n            adapter.dispatch(\"rename_relation\", \"dbt\")(from_relation, to_relation)\r\n        )\r\n    }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6579635, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\r\n    {% set target_name = adapter.quote_as_configured(\r\n        to_relation.identifier, \"identifier\"\r\n    ) %}\r\n    {% call statement(\"rename_relation\") -%}\r\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\r\n    {%- endcall %}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6589622, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename_intermediate.sql", "original_file_path": "macros\\relations\\rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\r\n    {{- log(\"Applying RENAME INTERMEDIATE to: \" ~ relation) -}}\r\n    {{- adapter.dispatch(\"get_rename_intermediate_sql\", \"dbt\")(relation) -}}\r\n{%- endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6589622, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename_intermediate.sql", "original_file_path": "macros\\relations\\rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\r\n\r\n    -- get the standard intermediate name\r\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\r\n\r\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6599617, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\replace.sql", "original_file_path": "macros\\relations\\replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\r\n    {{- log(\"Applying REPLACE to: \" ~ existing_relation) -}}\r\n    {{-\r\n        adapter.dispatch(\"get_replace_sql\", \"dbt\")(\r\n            existing_relation, target_relation, sql\r\n        )\r\n    -}}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6599617, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\replace.sql", "original_file_path": "macros\\relations\\replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\r\n\r\n    {# /* use a create or replace statement if possible */ #}\r\n    {% set is_replaceable = (\r\n        existing_relation.type == target_relation.type\r\n        and existing_relation.can_be_replaced\r\n    ) %}\r\n\r\n    {% if is_replaceable and existing_relation.is_view %}\r\n        {{ get_replace_view_sql(target_relation, sql) }}\r\n\r\n    {% elif is_replaceable and existing_relation.is_table %}\r\n        {{ get_replace_table_sql(target_relation, sql) }}\r\n\r\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\r\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\r\n\r\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\r\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\r\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\r\n        {{ get_create_intermediate_sql(target_relation, sql) }}\r\n        ;\r\n        {{ get_create_backup_sql(existing_relation) }}\r\n        ;\r\n        {{ get_rename_intermediate_sql(target_relation) }}\r\n        ;\r\n        {{ get_drop_backup_sql(existing_relation) }}\r\n\r\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\r\n    {%- elif target_relation.can_be_renamed -%}\r\n        {{ get_create_intermediate_sql(target_relation, sql) }}\r\n        ;\r\n        {{ get_drop_sql(existing_relation) }}\r\n        ;\r\n        {{ get_rename_intermediate_sql(target_relation) }}\r\n\r\n    {# /* create target_relation in place by first backing up the existing relation */ #}\r\n    {%- elif existing_relation.can_be_renamed -%}\r\n        {{ get_create_backup_sql(existing_relation) }}\r\n        ;\r\n        {{ get_create_sql(target_relation, sql) }}\r\n        ;\r\n        {{ get_drop_backup_sql(existing_relation) }}\r\n\r\n    {# /* no renaming is allowed, so just drop and create */ #}\r\n    {%- else -%}\r\n        {{ get_drop_sql(existing_relation) }}\r\n        ;\r\n        {{ get_create_sql(target_relation, sql) }}\r\n\r\n    {%- endif -%}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6619618, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\schema.sql", "original_file_path": "macros\\relations\\schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\r\n    {{ return(adapter.dispatch(\"drop_schema_named\", \"dbt\")(schema_name)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.662962, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\schema.sql", "original_file_path": "macros\\relations\\schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\r\n    {% set schema_relation = api.Relation.create(schema=schema_name) %}\r\n    {{ adapter.drop_schema(schema_relation) }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.662962, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\r\n    {{ adapter.dispatch(\"get_table_columns_and_constraints\", \"dbt\")() }}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6639616, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\r\n    {{ return(table_columns_and_constraints()) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6639616, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\r\n    {# loop through user_provided_columns to create DDL with data types and constraints #}\r\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(\r\n        raw_columns=model[\"columns\"]\r\n    ) -%}\r\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(\r\n        raw_constraints=model[\"constraints\"]\r\n    ) -%}\r\n    (\r\n        {% for c in raw_column_constraints -%}\r\n            {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\r\n        {% endfor %}\r\n        {% for c in raw_model_constraints -%}\r\n            {{ c }}{{ \",\" if not loop.last }}\r\n        {% endfor -%}\r\n    )\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6649609, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\r\n\r\n{%- macro get_assert_columns_equivalent(sql) -%}\r\n    {{ adapter.dispatch(\"get_assert_columns_equivalent\", \"dbt\")(sql) }}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6649609, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\r\n    {{ return(assert_columns_equivalent(sql)) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.665962, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\r\n\r\n    {#- - First ensure the user has defined 'columns' in yaml specification --#}\r\n    {%- set user_defined_columns = model[\"columns\"] -%}\r\n    {%- if not user_defined_columns -%}\r\n        {{ exceptions.raise_contract_error([], []) }}\r\n    {%- endif -%}\r\n\r\n    {#- - Obtain the column schema provided by sql file. #}\r\n    {%- set sql_file_provided_columns = get_column_schema_from_query(\r\n        sql, config.get(\"sql_header\", none)\r\n    ) -%}\r\n    {#- -Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\r\n    {%- set schema_file_provided_columns = get_column_schema_from_query(\r\n        get_empty_schema_sql(user_defined_columns)\r\n    ) -%}\r\n\r\n    {#- - create dictionaries with name and formatted data type and strings for exception #}\r\n    {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\r\n    {%- set yaml_columns = format_columns(schema_file_provided_columns) -%}\r\n\r\n    {%- if sql_columns | length != yaml_columns | length -%}\r\n        {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\r\n    {%- endif -%}\r\n\r\n    {%- for sql_col in sql_columns -%}\r\n        {%- set yaml_col = [] -%}\r\n        {%- for this_col in yaml_columns -%}\r\n            {%- if this_col[\"name\"] == sql_col[\"name\"] -%}\r\n                {%- do yaml_col.append(this_col) -%} {%- break -%}\r\n            {%- endif -%}\r\n        {%- endfor -%}\r\n        {%- if not yaml_col -%}\r\n            {#- - Column with name not found in yaml #}\r\n            {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\r\n        {%- endif -%}\r\n        {%- if sql_col[\"formatted\"] != yaml_col[0][\"formatted\"] -%}\r\n            {#- - Column data types don't match #}\r\n            {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\r\n        {%- endif -%}\r\n    {%- endfor -%}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.66797, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\r\n    {% set formatted_columns = [] %}\r\n    {% for column in columns %}\r\n        {%- set formatted_column = adapter.dispatch(\"format_column\", \"dbt\")(column) -%}\r\n        {%- do formatted_columns.append(formatted_column) -%}\r\n    {% endfor %}\r\n    {{ return(formatted_columns) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.66797, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\r\n    {% set data_type = column.dtype %}\r\n    {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\r\n    {{ return({\"name\": column.name, \"data_type\": data_type, \"formatted\": formatted}) }}\r\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.668969, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\r\n    relation,\r\n    configuration_changes,\r\n    sql,\r\n    existing_relation,\r\n    backup_relation,\r\n    intermediate_relation\r\n) %}\r\n    {{- log(\"Applying ALTER to: \" ~ relation) -}}\r\n    {{-\r\n        adapter.dispatch(\"get_alter_materialized_view_as_sql\", \"dbt\")(\r\n            relation,\r\n            configuration_changes,\r\n            sql,\r\n            existing_relation,\r\n            backup_relation,\r\n            intermediate_relation,\r\n        )\r\n    -}}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6699688, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\r\n    relation,\r\n    configuration_changes,\r\n    sql,\r\n    existing_relation,\r\n    backup_relation,\r\n    intermediate_relation\r\n) %}\r\n    {{\r\n        exceptions.raise_compiler_error(\r\n            \"Materialized views have not been implemented for this adapter.\"\r\n        )\r\n    }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6699688, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\r\n    /* {#\r\n    It's recommended that configuration changes be formatted as follows:\r\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\r\n\r\n    For example:\r\n    {\r\n        \"indexes\": [\r\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\r\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\r\n        ],\r\n    }\r\n\r\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\r\n    #} */\r\n    {{- log(\"Determining configuration changes on: \" ~ existing_relation) -}}\r\n    {%- do return(\r\n        adapter.dispatch(\r\n            \"get_materialized_view_configuration_changes\", \"dbt\"\r\n        )(existing_relation, new_config)\r\n    ) -%}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.67097, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(\r\n    existing_relation, new_config\r\n) %}\r\n    {{\r\n        exceptions.raise_compiler_error(\r\n            \"Materialized views have not been implemented for this adapter.\"\r\n        )\r\n    }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.67097, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\create.sql", "original_file_path": "macros\\relations\\materialized_view\\create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\r\n    {{-\r\n        adapter.dispatch(\"get_create_materialized_view_as_sql\", \"dbt\")(\r\n            relation, sql\r\n        )\r\n    -}}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.67097, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\create.sql", "original_file_path": "macros\\relations\\materialized_view\\create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\r\n    {{\r\n        exceptions.raise_compiler_error(\r\n            \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\r\n        )\r\n    }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.671969, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\drop.sql", "original_file_path": "macros\\relations\\materialized_view\\drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\r\n    {{- adapter.dispatch(\"drop_materialized_view\", \"dbt\")(relation) -}}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.671969, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\drop.sql", "original_file_path": "macros\\relations\\materialized_view\\drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\r\n    drop materialized view if exists {{ relation.render() }} cascade\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.671969, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\refresh.sql", "original_file_path": "macros\\relations\\materialized_view\\refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\r\n    {{- log(\"Applying REFRESH to: \" ~ relation) -}}\r\n    {{- adapter.dispatch(\"refresh_materialized_view\", \"dbt\")(relation) -}}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6729686, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\refresh.sql", "original_file_path": "macros\\relations\\materialized_view\\refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\r\n    {{\r\n        exceptions.raise_compiler_error(\r\n            \"`refresh_materialized_view` has not been implemented for this adapter.\"\r\n        )\r\n    }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6729686, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\rename.sql", "original_file_path": "macros\\relations\\materialized_view\\rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\r\n    {{-\r\n        adapter.dispatch(\"get_rename_materialized_view_sql\", \"dbt\")(\r\n            relation, new_name\r\n        )\r\n    -}}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6729686, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\rename.sql", "original_file_path": "macros\\relations\\materialized_view\\rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\r\n    {{\r\n        exceptions.raise_compiler_error(\r\n            \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\r\n        )\r\n    }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6739686, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\replace.sql", "original_file_path": "macros\\relations\\materialized_view\\replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\r\n    {{- adapter.dispatch(\"get_replace_materialized_view_sql\", \"dbt\")(relation, sql) -}}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6739686, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\replace.sql", "original_file_path": "macros\\relations\\materialized_view\\replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\r\n    {{\r\n        exceptions.raise_compiler_error(\r\n            \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\r\n        )\r\n    }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6739686, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\r\n    {{ adapter.dispatch(\"get_create_table_as_sql\", \"dbt\")(temporary, relation, sql) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6749687, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\r\n    {{ return(create_table_as(temporary, relation, sql)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6759698, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language=\"sql\") -%}\r\n    {# backward compatibility for create_table_as that does not support language #}\r\n    {% if language == \"sql\" %}\r\n        {{\r\n            adapter.dispatch(\"create_table_as\", \"dbt\")(\r\n                temporary, relation, compiled_code\r\n            )\r\n        }}\r\n    {% else %}\r\n        {{\r\n            adapter.dispatch(\"create_table_as\", \"dbt\")(\r\n                temporary, relation, compiled_code, language\r\n            )\r\n        }}\r\n    {% endif %}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6769683, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\r\n    {%- set sql_header = config.get(\"sql_header\", none) -%}\r\n\r\n    {{ sql_header if sql_header is not none }}\r\n\r\n  create {% if temporary: -%}temporary{%- endif %} table\r\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\r\n    {% set contract_config = config.get(\"contract\") %}\r\n    {% if contract_config.enforced and (not temporary) %}\r\n        {{ get_assert_columns_equivalent(sql) }}\r\n        {{ get_table_columns_and_constraints() }}\r\n        {%- set sql = get_select_subquery(sql) %}\r\n    {% endif %}\r\n  as (\r\n    {{ sql }}\r\n  );\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6779673, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\r\n    {#- loop through user_provided_columns to get column names -#}\r\n    {%- set user_provided_columns = model[\"columns\"] -%}\r\n    {%- for i in user_provided_columns %}\r\n        {%- set col = user_provided_columns[i] -%}\r\n        {%- set col_name = (\r\n            adapter.quote(col[\"name\"]) if col.get(\"quote\") else col[\"name\"]\r\n        ) -%}\r\n        {{ col_name }}{{ \", \" if not loop.last }}\r\n    {%- endfor -%}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6789975, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\r\n    {{ return(adapter.dispatch(\"get_select_subquery\", \"dbt\")(sql)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6789975, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\r\n    select {{ adapter.dispatch(\"get_column_names\", \"dbt\")() }}\r\n    from ({{ sql }}) as model_subq\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.679968, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\drop.sql", "original_file_path": "macros\\relations\\table\\drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\r\n    {{- adapter.dispatch(\"drop_table\", \"dbt\")(relation) -}}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.679968, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\drop.sql", "original_file_path": "macros\\relations\\table\\drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\r\n    drop table if exists {{ relation.render() }} cascade\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.679968, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\rename.sql", "original_file_path": "macros\\relations\\table\\rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\r\n    {{- adapter.dispatch(\"get_rename_table_sql\", \"dbt\")(relation, new_name) -}}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.679968, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\rename.sql", "original_file_path": "macros\\relations\\table\\rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\r\n    {{\r\n        exceptions.raise_compiler_error(\r\n            \"`get_rename_table_sql` has not been implemented for this adapter.\"\r\n        )\r\n    }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6815028, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\replace.sql", "original_file_path": "macros\\relations\\table\\replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\r\n    {{- adapter.dispatch(\"get_replace_table_sql\", \"dbt\")(relation, sql) -}}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6815028, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\replace.sql", "original_file_path": "macros\\relations\\table\\replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\r\n    {{\r\n        exceptions.raise_compiler_error(\r\n            \"`get_replace_table_sql` has not been implemented for this adapter.\"\r\n        )\r\n    }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6815028, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\r\n    {{ adapter.dispatch(\"get_create_view_as_sql\", \"dbt\")(relation, sql) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6825385, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\r\n    {{ return(create_view_as(relation, sql)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6825385, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\r\n    {{ adapter.dispatch(\"create_view_as\", \"dbt\")(relation, sql) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6825385, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\r\n    {%- set sql_header = config.get(\"sql_header\", none) -%}\r\n\r\n    {{ sql_header if sql_header is not none }}\r\n  create view {{ relation.render() }}\r\n    {% set contract_config = config.get(\"contract\") %}\r\n    {% if contract_config.enforced %}\r\n        {{ get_assert_columns_equivalent(sql) }}\r\n    {%- endif %}\r\n  as (\r\n    {{ sql }}\r\n  );\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6835382, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\drop.sql", "original_file_path": "macros\\relations\\view\\drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\r\n    {{- adapter.dispatch(\"drop_view\", \"dbt\")(relation) -}}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6845384, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\drop.sql", "original_file_path": "macros\\relations\\view\\drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\r\n    drop view if exists {{ relation.render() }} cascade\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6845384, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\rename.sql", "original_file_path": "macros\\relations\\view\\rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\r\n    {{- adapter.dispatch(\"get_rename_view_sql\", \"dbt\")(relation, new_name) -}}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6845384, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\rename.sql", "original_file_path": "macros\\relations\\view\\rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\r\n    {{\r\n        exceptions.raise_compiler_error(\r\n            \"`get_rename_view_sql` has not been implemented for this adapter.\"\r\n        )\r\n    }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6845384, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\r\n    {{- adapter.dispatch(\"get_replace_view_sql\", \"dbt\")(relation, sql) -}}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6865091, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\r\n    {{\r\n        exceptions.raise_compiler_error(\r\n            \"`get_replace_view_sql` has not been implemented for this adapter.\"\r\n        )\r\n    }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6865091, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\r\n    {%- set identifier = model[\"alias\"] -%}\r\n\r\n    {%- set old_relation = adapter.get_relation(\r\n        database=database, schema=schema, identifier=identifier\r\n    ) -%}\r\n    {%- set exists_as_view = old_relation is not none and old_relation.is_view -%}\r\n\r\n    {%- set target_relation = api.Relation.create(\r\n        identifier=identifier, schema=schema, database=database, type=\"view\"\r\n    ) -%}\r\n    {% set grant_config = config.get(\"grants\") %}\r\n\r\n    {{ run_hooks(pre_hooks) }}\r\n\r\n    -- If there's a table with the same name and we weren't told to full refresh,\r\n    -- that's an error. If we were told to full refresh, drop it. This behavior differs\r\n    -- for Snowflake and BigQuery, so multiple dispatch is used.\r\n    {%- if old_relation is not none and old_relation.is_table -%}\r\n        {{ handle_existing_table(should_full_refresh(), old_relation) }}\r\n    {%- endif -%}\r\n\r\n    -- build model\r\n    {% call statement(\"main\") -%}\r\n        {{ get_create_view_as_sql(target_relation, sql) }}\r\n    {%- endcall %}\r\n\r\n    {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\r\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\r\n\r\n    {{ run_hooks(post_hooks) }}\r\n\r\n    {{ return({\"relations\": [target_relation]}) }}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.688509, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\r\n    {{ adapter.dispatch(\"handle_existing_table\", \"dbt\")(full_refresh, old_relation) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.688509, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\r\n    {{\r\n        log(\r\n            \"Dropping relation \"\r\n            ~ old_relation.render()\r\n            ~ \" because it is of type \"\r\n            ~ old_relation.type\r\n        )\r\n    }}\r\n    {{ adapter.drop_relation(old_relation) }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.688509, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\r\n    -- Fixture for {{ model.name }}\r\n    {% set default_row = {} %}\r\n\r\n    {%- if not column_name_to_data_types -%}\r\n        {#- - Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\r\n        {%- set this_or_defer_relation = (\r\n            defer_relation\r\n            if (defer_relation and not load_relation(this))\r\n            else this\r\n        ) -%}\r\n        {%- set columns_in_relation = adapter.get_columns_in_relation(\r\n            this_or_defer_relation\r\n        ) -%}\r\n\r\n        {%- set column_name_to_data_types = {} -%}\r\n        {%- for column in columns_in_relation -%}\r\n            {#- - This needs to be a case-insensitive comparison --#}\r\n            {%- do column_name_to_data_types.update(\r\n                {column.name | lower: column.data_type}\r\n            ) -%}\r\n        {%- endfor -%}\r\n    {%- endif -%}\r\n\r\n    {%- if not column_name_to_data_types -%}\r\n        {{\r\n            exceptions.raise_compiler_error(\r\n                \"Not able to get columns for unit test '\"\r\n                ~ model.name\r\n                ~ \"' from relation \"\r\n                ~ this\r\n                ~ \" because the relation doesn't exist\"\r\n            )\r\n        }}\r\n    {%- endif -%}\r\n\r\n    {%- for column_name, column_type in column_name_to_data_types.items() -%}\r\n        {%- do default_row.update(\r\n            {column_name: (safe_cast(\"null\", column_type) | trim)}\r\n        ) -%}\r\n    {%- endfor -%}\r\n\r\n    {{ validate_fixture_rows(rows, row_number) }}\r\n\r\n    {%- for row in rows -%}\r\n        {%- set formatted_row = format_row(row, column_name_to_data_types) -%}\r\n        {%- set default_row_copy = default_row.copy() -%}\r\n        {%- do default_row_copy.update(formatted_row) -%}\r\n        select\r\n            {%- for column_name, column_value in default_row_copy.items() %}\r\n                {{ column_value }} as {{ column_name }}\r\n                {% if not loop.last -%}, {%- endif %}\r\n            {%- endfor %}\r\n        {%- if not loop.last %}\r\n            union all\r\n        {% endif %}\r\n    {%- endfor -%}\r\n\r\n    {%- if (rows | length) == 0 -%}\r\n        select\r\n            {%- for column_name, column_value in default_row.items() %}\r\n                {{ column_value }} as {{ column_name }}\r\n                {% if not loop.last -%},{%- endif %}\r\n            {%- endfor %}\r\n        limit 0\r\n    {%- endif -%}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.validate_fixture_rows", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6935065, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\r\n\r\n    {%- if (rows | length) == 0 -%} select * from dbt_internal_unit_test_actual limit 0\r\n    {%- else -%}\r\n        {%- for row in rows -%}\r\n            {%- set formatted_row = format_row(row, column_name_to_data_types) -%}\r\n            select\r\n                {%- for column_name, column_value in formatted_row.items() %}\r\n                    {{ column_value }} as {{ column_name }}\r\n                    {% if not loop.last -%}, {%- endif %}\r\n                {%- endfor %}\r\n            {%- if not loop.last %}\r\n                union all\r\n            {% endif %}\r\n        {%- endfor -%}\r\n    {%- endif -%}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6945071, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\r\n\r\n{%- macro format_row(row, column_name_to_data_types) -%}\r\n    {#- - generate case-insensitive formatted row --#}\r\n    {% set formatted_row = {} %}\r\n    {%- for column_name, column_value in row.items() -%}\r\n        {% set column_name = column_name | lower %}\r\n\r\n        {%- if column_name not in column_name_to_data_types %}\r\n            {#- - if user-provided row contains column name that relation does not contain, raise an error --#}\r\n            {% set fixture_name = (\r\n                \"expected output\"\r\n                if model.resource_type == \"unit_test\"\r\n                else (\"'\" ~ model.name ~ \"'\")\r\n            ) %}\r\n            {{\r\n                exceptions.raise_compiler_error(\r\n                    \"Invalid column name: '\"\r\n                    ~ column_name\r\n                    ~ \"' in unit test fixture for \"\r\n                    ~ fixture_name\r\n                    ~ \".\"\r\n                    \"\\nAccepted columns for \"\r\n                    ~ fixture_name\r\n                    ~ \" are: \"\r\n                    ~ (column_name_to_data_types.keys() | list)\r\n                )\r\n            }}\r\n        {%- endif -%}\r\n\r\n        {%- set column_type = column_name_to_data_types[column_name] %}\r\n\r\n        {#- - sanitize column_value: wrap yaml strings in quotes, apply cast --#}\r\n        {%- set column_value_clean = column_value -%}\r\n        {%- if column_value is string -%}\r\n            {%- set column_value_clean = dbt.string_literal(\r\n                dbt.escape_single_quotes(column_value)\r\n            ) -%}\r\n        {%- elif column_value is none -%} {%- set column_value_clean = \"null\" -%}\r\n        {%- endif -%}\r\n\r\n        {%- set row_update = {\r\n            column_name: safe_cast(column_value_clean, column_type)\r\n        } -%}\r\n        {%- do formatted_row.update(row_update) -%}\r\n    {%- endfor -%}\r\n    {{ return(formatted_row) }}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6965098, "supported_languages": null}, "macro.dbt.validate_fixture_rows": {"name": "validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.validate_fixture_rows", "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\r\n    {{ return(adapter.dispatch(\"validate_fixture_rows\", \"dbt\")(rows, row_number)) }}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbt.default__validate_fixture_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6965098, "supported_languages": null}, "macro.dbt.default__validate_fixture_rows": {"name": "default__validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.default__validate_fixture_rows", "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\r\n{# This is an abstract method for adapter overrides as needed #}\r\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6965098, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\r\n    {{ return(adapter.dispatch(\"any_value\", \"dbt\")(expression)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6975076, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%} any_value({{ expression }}) {%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6975076, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\r\n    {{ return(adapter.dispatch(\"array_append\", \"dbt\")(array, new_element)) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6985078, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\r\n    array_append({{ array }}, {{ new_element }})\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6985078, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\r\n    {{ return(adapter.dispatch(\"array_concat\", \"dbt\")(array_1, array_2)) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6985078, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\r\n    array_cat({{ array_1 }}, {{ array_2 }})\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6995084, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type(\"integer\")) -%}\r\n    {{ return(adapter.dispatch(\"array_construct\", \"dbt\")(inputs, data_type)) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.6995084, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\r\n    {% if inputs | length > 0 %} array[{{ inputs | join(\" , \") }}]\r\n    {% else %} array[]::{{ data_type }} []\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7005074, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\r\n    {{ return(adapter.dispatch(\"bool_or\", \"dbt\")(expression)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7005074, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%} bool_or({{ expression }}) {%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7005074, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast.sql", "original_file_path": "macros\\utils\\cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\r\n    {{ return(adapter.dispatch(\"cast\", \"dbt\")(field, type)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7015073, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast.sql", "original_file_path": "macros\\utils\\cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %} cast({{ field }} as {{ type }}) {% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7015073, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\r\n    {{ adapter.dispatch(\"cast_bool_to_text\", \"dbt\")(field) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7025077, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\r\n    cast({{ field }} as {{ api.Column.translate_type(\"string\") }})\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7025077, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\r\n    {{ return(adapter.dispatch(\"concat\", \"dbt\")(fields)) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7025077, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%} {{ fields | join(\" || \") }} {%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7035072, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\r\n{%- macro type_string() -%}\r\n    {{ return(adapter.dispatch(\"type_string\", \"dbt\")()) }}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7045078, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\r\n    {{ return(api.Column.translate_type(\"string\")) }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7045078, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\r\n{%- macro type_timestamp() -%}\r\n    {{ return(adapter.dispatch(\"type_timestamp\", \"dbt\")()) }}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.705508, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\r\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.705508, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\r\n{%- macro type_float() -%}\r\n    {{ return(adapter.dispatch(\"type_float\", \"dbt\")()) }}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.705508, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\r\n    {{ return(api.Column.translate_type(\"float\")) }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7065094, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\r\n{%- macro type_numeric() -%}\r\n    {{ return(adapter.dispatch(\"type_numeric\", \"dbt\")()) }}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7065094, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\r\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7065094, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\r\n{%- macro type_bigint() -%}\r\n    {{ return(adapter.dispatch(\"type_bigint\", \"dbt\")()) }}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7065094, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\r\n    {{ return(api.Column.translate_type(\"bigint\")) }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7075126, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\r\n{%- macro type_int() -%}\r\n    {{ return(adapter.dispatch(\"type_int\", \"dbt\")()) }}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7075126, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\r\n    {{ return(api.Column.translate_type(\"integer\")) }}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.708509, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\r\n{%- macro type_boolean() -%}\r\n    {{ return(adapter.dispatch(\"type_boolean\", \"dbt\")()) }}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.708509, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\r\n    {{ return(api.Column.translate_type(\"boolean\")) }}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.708509, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date.sql", "original_file_path": "macros\\utils\\date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\r\n    {{ return(adapter.dispatch(\"date\", \"dbt\")(year, month, day)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7095098, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date.sql", "original_file_path": "macros\\utils\\date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\r\n    {%- set dt = modules.datetime.date(year, month, day) -%}\r\n    {%- set iso_8601_formatted_date = dt.strftime(\"%Y-%m-%d\") -%}\r\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7095098, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\r\n    {{\r\n        return(\r\n            adapter.dispatch(\"dateadd\", \"dbt\")(\r\n                datepart, interval, from_date_or_timestamp\r\n            )\r\n        )\r\n    }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.710507, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\r\n\r\n    dateadd({{ datepart }}, {{ interval }}, {{ from_date_or_timestamp }})\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.710507, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\r\n    {{\r\n        return(\r\n            adapter.dispatch(\"datediff\", \"dbt\")(first_date, second_date, datepart)\r\n        )\r\n    }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.710507, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\r\n\r\n    datediff({{ datepart }}, {{ first_date }}, {{ second_date }})\r\n\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.71151, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\r\n    {{\r\n        return(\r\n            adapter.dispatch(\"get_intervals_between\", \"dbt\")(\r\n                start_date, end_date, datepart\r\n            )\r\n        )\r\n    }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.71151, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\r\n    {%- call statement(\"get_intervals_between\", fetch_result=True) %}\r\n\r\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\r\n\r\n    {%- endcall -%}\r\n\r\n    {%- set value_list = load_result(\"get_intervals_between\") -%}\r\n\r\n    {%- if value_list and value_list[\"data\"] -%}\r\n        {%- set values = value_list[\"data\"] | map(attribute=0) | list %}\r\n        {{ return(values[0]) }}\r\n    {%- else -%} {{ return(1) }}\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7135067, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\r\n    {{ return(adapter.dispatch(\"date_spine\", \"dbt\")(datepart, start_date, end_date)) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7135067, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\r\n\r\n    {# call as follows:\r\n\r\n    date_spine(\r\n        \"day\",\r\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\r\n        \"dbt.dateadd(week, 1, current_date)\"\r\n    ) #}\r\n    with\r\n        rawdata as (\r\n\r\n            {{\r\n                dbt.generate_series(\r\n                    dbt.get_intervals_between(start_date, end_date, datepart)\r\n                )\r\n            }}\r\n\r\n        ),\r\n\r\n        all_periods as (\r\n\r\n            select\r\n                (\r\n                    {{\r\n                        dbt.dateadd(\r\n                            datepart, \"row_number() over (order by 1) - 1\", start_date\r\n                        )\r\n                    }}\r\n                ) as date_{{ datepart }}\r\n            from rawdata\r\n\r\n        ),\r\n\r\n        filtered as (\r\n\r\n            select * from all_periods where date_{{ datepart }} <= {{ end_date }}\r\n\r\n        )\r\n\r\n    select *\r\n    from filtered\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7145085, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\r\n    {{ return(adapter.dispatch(\"date_trunc\", \"dbt\")(datepart, date)) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7145085, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\r\n    date_trunc('{{datepart}}', {{ date }})\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7145085, "supported_languages": null}, "macro.dbt.equals": {"name": "equals", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\equals.sql", "original_file_path": "macros\\utils\\equals.sql", "unique_id": "macro.dbt.equals", "macro_sql": "{% macro equals(expr1, expr2) %}\r\n    {{ return(adapter.dispatch(\"equals\", \"dbt\")(expr1, expr2)) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.715507, "supported_languages": null}, "macro.dbt.default__equals": {"name": "default__equals", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\equals.sql", "original_file_path": "macros\\utils\\equals.sql", "unique_id": "macro.dbt.default__equals", "macro_sql": "{% macro default__equals(expr1, expr2) -%}\r\n    {%- if adapter.behavior.enable_truthy_nulls_equals_macro.no_warn %}\r\n        case\r\n            when\r\n                (\r\n                    ({{ expr1 }} = {{ expr2 }})\r\n                    or ({{ expr1 }} is null and {{ expr2 }} is null)\r\n                )\r\n            then 0\r\n            else 1\r\n        end\r\n        = 0\r\n    {%- else -%} ({{ expr1 }} = {{ expr2 }})\r\n    {%- endif %}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.715507, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\r\n    {{ return(adapter.dispatch(\"escape_single_quotes\", \"dbt\")(expression)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.717509, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\r\n    {{ expression | replace(\"'\", \"''\") }}\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.717509, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %} {{ return(adapter.dispatch(\"except\", \"dbt\")()) }} {% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7185097, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\r\n\r\n    except\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7185097, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\r\n    {{ return(adapter.dispatch(\"get_powers_of_two\", \"dbt\")(upper_bound)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7185097, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\r\n\r\n    {% if upper_bound <= 0 %}\r\n        {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\r\n    {% endif %}\r\n\r\n    {% for _ in range(1, 100) %}\r\n        {% if upper_bound <= 2**loop.index %} {{ return(loop.index) }}{% endif %}\r\n    {% endfor %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7195082, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\r\n    {{ return(adapter.dispatch(\"generate_series\", \"dbt\")(upper_bound)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7195082, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\r\n\r\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\r\n\r\n    with\r\n        p as (\r\n            select 0 as generated_number\r\n            union all\r\n            select 1\r\n        ),\r\n        unioned as (\r\n\r\n            select\r\n\r\n                {% for i in range(n) %}\r\n                    p{{ i }}.generated_number * power(2, {{ i }})\r\n                    {% if not loop.last %} + {% endif %}\r\n                {% endfor %}\r\n                + 1 as generated_number\r\n\r\n            from\r\n\r\n            {% for i in range(n) %}\r\n                    p as p{{ i }} {% if not loop.last %} cross join {% endif %}\r\n            {% endfor %}\r\n\r\n        )\r\n\r\n    select *\r\n    from unioned\r\n    where generated_number <= {{ upper_bound }}\r\n    order by generated_number\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7205079, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\r\n    {{ return(adapter.dispatch(\"hash\", \"dbt\")(field)) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7215078, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\r\n    md5(cast({{ field }} as {{ api.Column.translate_type(\"string\") }}))\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7215078, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\r\n    {{ return(adapter.dispatch(\"intersect\", \"dbt\")()) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7215078, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\r\n\r\n    intersect\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7225127, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\r\n    {{ return(adapter.dispatch(\"last_day\", \"dbt\")(date, datepart)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7225127, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\r\n\r\n{%- macro default_last_day(date, datepart) -%}\r\n    cast(\r\n        {{\r\n            dbt.dateadd(\r\n                \"day\",\r\n                \"-1\",\r\n                dbt.dateadd(datepart, \"1\", dbt.date_trunc(datepart, date)),\r\n            )\r\n        }} as date\r\n    )\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7235124, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\r\n    {{ dbt.default_last_day(date, datepart) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7235124, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\r\n    {{ return(adapter.dispatch(\"length\", \"dbt\")(expression)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7235124, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %} length({{ expression }}) {%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7235124, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(\r\n    measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none\r\n) -%}\r\n    {{\r\n        return(\r\n            adapter.dispatch(\"listagg\", \"dbt\")(\r\n                measure, delimiter_text, order_by_clause, limit_num\r\n            )\r\n        )\r\n    }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.724512, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\r\n\r\n    {% if limit_num -%}\r\n        array_to_string(\r\n            array_slice(\r\n                array_agg({{ measure }})\r\n                {% if order_by_clause -%}\r\n                    within group ({{ order_by_clause }})\r\n                {%- endif %},\r\n                0,\r\n                {{ limit_num }}\r\n            ),\r\n            {{ delimiter_text }}\r\n        )\r\n    {%- else %}\r\n        listagg({{ measure }}, {{ delimiter_text }})\r\n        {% if order_by_clause -%} within group ({{ order_by_clause }})\r\n        {%- endif %}\r\n    {%- endif %}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7255118, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\r\n    {{ return(adapter.dispatch(\"string_literal\", \"dbt\")(value)) }}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7255118, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%} '{{ value }}' {%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7265096, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\r\n    {{ return(adapter.dispatch(\"position\", \"dbt\")(substring_text, string_text)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7275121, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\r\n\r\n    position({{ substring_text }} in {{ string_text }})\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7275121, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\r\n    {{ return(adapter.dispatch(\"replace\", \"dbt\")(field, old_chars, new_chars)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7275121, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\r\n\r\n    replace({{ field }}, {{ old_chars }}, {{ new_chars }})\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7285097, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\r\n    {{ return(adapter.dispatch(\"right\", \"dbt\")(string_text, length_expression)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7285097, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\r\n\r\n    right({{ string_text }}, {{ length_expression }})\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7285097, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\r\n    {{ return(adapter.dispatch(\"safe_cast\", \"dbt\")(field, type)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.729509, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\r\n    {# most databases don't support this function yet\r\n    so we just need to use cast #}\r\n    cast({{ field }} as {{ type }})\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.729509, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\r\n    {{\r\n        return(\r\n            adapter.dispatch(\"split_part\", \"dbt\")(\r\n                string_text, delimiter_text, part_number\r\n            )\r\n        )\r\n    }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7305088, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\r\n\r\n    split_part({{ string_text }}, {{ delimiter_text }}, {{ part_number }})\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7305088, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\r\n\r\n    split_part(\r\n        {{ string_text }},\r\n        {{ delimiter_text }},\r\n        length({{ string_text }})\r\n        - length(replace({{ string_text }}, {{ delimiter_text }}, ''))\r\n        + 2\r\n        + {{ part_number }}\r\n    )\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7305088, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\r\n    {% set macro = adapter.dispatch(\"test_unique\", \"dbt\") %}\r\n    {{ macro(model, column_name) }}\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7315087, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\r\n    {% set macro = adapter.dispatch(\"test_not_null\", \"dbt\") %}\r\n    {{ macro(model, column_name) }}\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7315087, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\r\n    {% set macro = adapter.dispatch(\"test_accepted_values\", \"dbt\") %}\r\n    {{ macro(model, column_name, values, quote) }}\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7325084, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\r\n    {% set macro = adapter.dispatch(\"test_relationships\", \"dbt\") %}\r\n    {{ macro(model, column_name, to, field) }}\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1744721035.7325084, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs\\overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.meu_projeto_dbt.stg_cliente": [], "model.meu_projeto_dbt.stg_itens_pedido": [], "model.meu_projeto_dbt.stg_pedido": [], "model.meu_projeto_dbt.stg_produto": [], "test.meu_projeto_dbt.unique_stg_cliente_id_cliente.733cdc91e9": ["model.meu_projeto_dbt.stg_cliente"], "test.meu_projeto_dbt.not_null_stg_cliente_id_cliente.7ecdbeed7e": ["model.meu_projeto_dbt.stg_cliente"], "test.meu_projeto_dbt.not_null_stg_cliente_primeiro_nome.4b8446d1b7": ["model.meu_projeto_dbt.stg_cliente"], "test.meu_projeto_dbt.not_null_stg_cliente_sobrenome.9419dc8703": ["model.meu_projeto_dbt.stg_cliente"], "test.meu_projeto_dbt.not_null_stg_cliente_id_genero.12675eb7f4": ["model.meu_projeto_dbt.stg_cliente"], "model.meu_projeto_dbt.stg_email_marketing": [], "model.meu_projeto_dbt.stg_genero": [], "model.meu_projeto_dbt.stg_formas_pagamento": [], "model.meu_projeto_dbt.stg_categoria": [], "model.meu_projeto_dbt.stg_estado_civil": [], "model.meu_projeto_dbt.stg_canais_venda": [], "model.meu_projeto_dbt.stg_estado": [], "model.meu_projeto_dbt.stg_status": [], "test.meu_projeto_dbt.unique_stg_categoria_id_categoria.dcb2a8f121": ["model.meu_projeto_dbt.stg_categoria"], "test.meu_projeto_dbt.not_null_stg_categoria_id_categoria.71fd8580d6": ["model.meu_projeto_dbt.stg_categoria"], "test.meu_projeto_dbt.unique_stg_categoria_descricao_categoria.8072a693b6": ["model.meu_projeto_dbt.stg_categoria"], "test.meu_projeto_dbt.not_null_stg_categoria_descricao_categoria.77e898a9af": ["model.meu_projeto_dbt.stg_categoria"], "test.meu_projeto_dbt.unique_stg_canais_venda_id_canal_venda.2f3c34ab29": ["model.meu_projeto_dbt.stg_canais_venda"], "test.meu_projeto_dbt.not_null_stg_canais_venda_id_canal_venda.bc4c4810d7": ["model.meu_projeto_dbt.stg_canais_venda"], "test.meu_projeto_dbt.unique_stg_canais_venda_descricao_canal_venda.b5e883150c": ["model.meu_projeto_dbt.stg_canais_venda"], "test.meu_projeto_dbt.not_null_stg_canais_venda_descricao_canal_venda.1726855010": ["model.meu_projeto_dbt.stg_canais_venda"], "model.meu_projeto_dbt.raw_pedido": ["model.meu_projeto_dbt.stg_pedido"], "model.meu_projeto_dbt.raw_tempo_medio_entrega": ["model.meu_projeto_dbt.stg_pedido"], "model.meu_projeto_dbt.raw_valor_total_forma_pagamento": ["model.meu_projeto_dbt.raw_pedido", "model.meu_projeto_dbt.stg_formas_pagamento"], "model.meu_projeto_dbt.raw_faturamento_mensal": ["model.meu_projeto_dbt.raw_pedido"], "model.meu_projeto_dbt.raw_cliente_pedido_pendente": ["model.meu_projeto_dbt.raw_pedido", "model.meu_projeto_dbt.stg_canais_venda", "model.meu_projeto_dbt.stg_cliente", "model.meu_projeto_dbt.stg_itens_pedido", "model.meu_projeto_dbt.stg_produto"], "model.meu_projeto_dbt.raw_ticket_medio_cliente": ["model.meu_projeto_dbt.raw_pedido", "model.meu_projeto_dbt.stg_cliente"], "model.meu_projeto_dbt.raw_valor_total_canal_venda": ["model.meu_projeto_dbt.raw_pedido", "model.meu_projeto_dbt.stg_canais_venda"]}, "child_map": {"model.meu_projeto_dbt.stg_cliente": ["model.meu_projeto_dbt.raw_cliente_pedido_pendente", "model.meu_projeto_dbt.raw_ticket_medio_cliente", "test.meu_projeto_dbt.not_null_stg_cliente_id_cliente.7ecdbeed7e", "test.meu_projeto_dbt.not_null_stg_cliente_id_genero.12675eb7f4", "test.meu_projeto_dbt.not_null_stg_cliente_primeiro_nome.4b8446d1b7", "test.meu_projeto_dbt.not_null_stg_cliente_sobrenome.9419dc8703", "test.meu_projeto_dbt.unique_stg_cliente_id_cliente.733cdc91e9"], "model.meu_projeto_dbt.stg_itens_pedido": ["model.meu_projeto_dbt.raw_cliente_pedido_pendente"], "model.meu_projeto_dbt.stg_pedido": ["model.meu_projeto_dbt.raw_pedido", "model.meu_projeto_dbt.raw_tempo_medio_entrega"], "model.meu_projeto_dbt.stg_produto": ["model.meu_projeto_dbt.raw_cliente_pedido_pendente"], "test.meu_projeto_dbt.unique_stg_cliente_id_cliente.733cdc91e9": [], "test.meu_projeto_dbt.not_null_stg_cliente_id_cliente.7ecdbeed7e": [], "test.meu_projeto_dbt.not_null_stg_cliente_primeiro_nome.4b8446d1b7": [], "test.meu_projeto_dbt.not_null_stg_cliente_sobrenome.9419dc8703": [], "test.meu_projeto_dbt.not_null_stg_cliente_id_genero.12675eb7f4": [], "model.meu_projeto_dbt.stg_email_marketing": [], "model.meu_projeto_dbt.stg_genero": [], "model.meu_projeto_dbt.stg_formas_pagamento": ["model.meu_projeto_dbt.raw_valor_total_forma_pagamento"], "model.meu_projeto_dbt.stg_categoria": ["test.meu_projeto_dbt.not_null_stg_categoria_descricao_categoria.77e898a9af", "test.meu_projeto_dbt.not_null_stg_categoria_id_categoria.71fd8580d6", "test.meu_projeto_dbt.unique_stg_categoria_descricao_categoria.8072a693b6", "test.meu_projeto_dbt.unique_stg_categoria_id_categoria.dcb2a8f121"], "model.meu_projeto_dbt.stg_estado_civil": [], "model.meu_projeto_dbt.stg_canais_venda": ["model.meu_projeto_dbt.raw_cliente_pedido_pendente", "model.meu_projeto_dbt.raw_valor_total_canal_venda", "test.meu_projeto_dbt.not_null_stg_canais_venda_descricao_canal_venda.1726855010", "test.meu_projeto_dbt.not_null_stg_canais_venda_id_canal_venda.bc4c4810d7", "test.meu_projeto_dbt.unique_stg_canais_venda_descricao_canal_venda.b5e883150c", "test.meu_projeto_dbt.unique_stg_canais_venda_id_canal_venda.2f3c34ab29"], "model.meu_projeto_dbt.stg_estado": [], "model.meu_projeto_dbt.stg_status": [], "test.meu_projeto_dbt.unique_stg_categoria_id_categoria.dcb2a8f121": [], "test.meu_projeto_dbt.not_null_stg_categoria_id_categoria.71fd8580d6": [], "test.meu_projeto_dbt.unique_stg_categoria_descricao_categoria.8072a693b6": [], "test.meu_projeto_dbt.not_null_stg_categoria_descricao_categoria.77e898a9af": [], "test.meu_projeto_dbt.unique_stg_canais_venda_id_canal_venda.2f3c34ab29": [], "test.meu_projeto_dbt.not_null_stg_canais_venda_id_canal_venda.bc4c4810d7": [], "test.meu_projeto_dbt.unique_stg_canais_venda_descricao_canal_venda.b5e883150c": [], "test.meu_projeto_dbt.not_null_stg_canais_venda_descricao_canal_venda.1726855010": [], "model.meu_projeto_dbt.raw_pedido": ["model.meu_projeto_dbt.raw_cliente_pedido_pendente", "model.meu_projeto_dbt.raw_faturamento_mensal", "model.meu_projeto_dbt.raw_ticket_medio_cliente", "model.meu_projeto_dbt.raw_valor_total_canal_venda", "model.meu_projeto_dbt.raw_valor_total_forma_pagamento"], "model.meu_projeto_dbt.raw_tempo_medio_entrega": [], "model.meu_projeto_dbt.raw_valor_total_forma_pagamento": [], "model.meu_projeto_dbt.raw_faturamento_mensal": [], "model.meu_projeto_dbt.raw_cliente_pedido_pendente": [], "model.meu_projeto_dbt.raw_ticket_medio_cliente": [], "model.meu_projeto_dbt.raw_valor_total_canal_venda": []}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}}
